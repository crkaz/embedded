

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Oct 28 17:38:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	strings
   175  0003                     __pstrings:	
   176  0003                     stringtab:	
   177  0003                     __stringtab:	
   178  0003                     stringcode:	
   179                           ;	String table - string pointers are 1 byte each
   180                           
   181  0003                     stringdir:	
   182  0003  3000               	movlw	high stringdir
   183  0004  008A               	movwf	10
   184  0005  0804               	movf	4,w
   185  0006  0A84               	incf	4,f
   186  0007  0782               	addwf	2,f
   187  0008                     __stringbase:	
   188  0008  3400               	retlw	0
   189  0009                     __end_of__stringtab:	
   190  0009                     setCursorPos@ln4:	
   191  0009  34D8               	retlw	216
   192  000A  3400               	retlw	0
   193  000B                     __end_ofsetCursorPos@ln4:	
   194  000B                     setCursorPos@ln3:	
   195  000B  34C8               	retlw	200
   196  000C  3400               	retlw	0
   197  000D                     __end_ofsetCursorPos@ln3:	
   198  000D                     setCursorPos@ln2:	
   199  000D  34D0               	retlw	208
   200  000E  3400               	retlw	0
   201  000F                     __end_ofsetCursorPos@ln2:	
   202  000F                     setCursorPos@ln1:	
   203  000F  34C0               	retlw	192
   204  0010  3400               	retlw	0
   205  0011                     __end_ofsetCursorPos@ln1:	
   206  0008                     _PORTD	set	8
   207  002B                     _RA3	set	43
   208  002C                     _RA4	set	44
   209  002D                     _RA5	set	45
   210  002A                     _RA2	set	42
   211  0088                     _TRISD	set	136
   212  0085                     _TRISA	set	133
   213  009F                     _ADCON1	set	159
   214  0011                     STR_2:	
   215  0011  3457               	retlw	87	;'W'
   216  0012  346F               	retlw	111	;'o'
   217  0013  3472               	retlw	114	;'r'
   218  0014  346C               	retlw	108	;'l'
   219  0015  3464               	retlw	100	;'d'
   220  0016  3479               	retlw	121	;'y'
   221  0017  3400               	retlw	0
   222  0018                     STR_3:	
   223  0018  3457               	retlw	87	;'W'
   224  0019  346F               	retlw	111	;'o'
   225  001A  3472               	retlw	114	;'r'
   226  001B  346C               	retlw	108	;'l'
   227  001C  3464               	retlw	100	;'d'
   228  001D  3400               	retlw	0
   229  001E                     STR_1:	
   230  001E  3448               	retlw	72	;'H'
   231  001F  3465               	retlw	101	;'e'
   232  0020  346C               	retlw	108	;'l'
   233  0021  346C               	retlw	108	;'l'
   234  0022  346F               	retlw	111	;'o'
   235  0023  3400               	retlw	0
   236  0024                     STR_4:	
   237  0024  3478               	retlw	120	;'x'
   238  0025  3458               	retlw	88	;'X'
   239  0026  3478               	retlw	120	;'x'
   240  0027  3400               	retlw	0
   241                           
   242                           ; #config settings
   243  0000                     
   244                           	psect	cinit
   245  07FC                     start_initialization:	
   246  07FC                     __initialization:	
   247  07FC                     end_of_initialization:	
   248                           ;End of C runtime variable initialization code
   249                           
   250  07FC                     __end_of__initialization:	
   251  07FC  0183               	clrf	3
   252  07FD  120A  118A  2F7C   	ljmp	_main	;jump to C main() function
   253                           
   254                           	psect	cstackCOMMON
   255  0070                     __pcstackCOMMON:	
   256  0070                     ?_writecmd:	
   257  0070                     ?_delay:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_init:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ??_init:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_lcd_init:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_writechar:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_writeString:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_strlen:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     delay@t:	
   282                           ; 2 bytes @ 0x0
   283                           
   284                           
   285                           ; 2 bytes @ 0x0
   286  0070                     	ds	2
   287  0072                     ??_delay:	
   288                           
   289                           ; 1 bytes @ 0x2
   290  0072                     	ds	1
   291  0073                     ??_strlen:	
   292  0073                     strlen@a:	
   293                           ; 1 bytes @ 0x3
   294                           
   295  0073                     delay@i:	
   296                           ; 1 bytes @ 0x3
   297                           
   298                           
   299                           ; 2 bytes @ 0x3
   300  0073                     	ds	1
   301  0074                     strlen@len:	
   302                           
   303                           ; 2 bytes @ 0x4
   304  0074                     	ds	1
   305  0075                     ??_writecmd:	
   306  0075                     ??_writechar:	
   307                           ; 1 bytes @ 0x5
   308                           
   309  0075                     writechar@x:	
   310                           ; 1 bytes @ 0x5
   311                           
   312  0075                     writecmd@x:	
   313                           ; 1 bytes @ 0x5
   314                           
   315                           
   316                           ; 1 bytes @ 0x5
   317  0075                     	ds	1
   318  0076                     ??_lcd_init:	
   319  0076                     ??_writeString:	
   320                           ; 1 bytes @ 0x6
   321                           
   322  0076                     ?_setCursorPos:	
   323                           ; 1 bytes @ 0x6
   324                           
   325  0076                     setCursorPos@lineN:	
   326                           ; 1 bytes @ 0x6
   327                           
   328                           
   329                           ; 2 bytes @ 0x6
   330  0076                     	ds	1
   331  0077                     writeString@i:	
   332                           
   333                           ; 2 bytes @ 0x7
   334  0077                     	ds	1
   335  0078                     setCursorPos@pos:	
   336                           
   337                           ; 2 bytes @ 0x8
   338  0078                     	ds	1
   339  0079                     writeString@str:	
   340                           
   341                           ; 1 bytes @ 0x9
   342  0079                     	ds	1
   343  007A                     ??_setCursorPos:	
   344  007A                     setCursorPos@addr:	
   345                           ; 1 bytes @ 0xA
   346                           
   347                           
   348                           ; 2 bytes @ 0xA
   349  007A                     	ds	2
   350  007C                     ??_main:	
   351                           
   352                           ; 1 bytes @ 0xC
   353  007C                     	ds	1
   354                           
   355                           	psect	cstackBANK0
   356  0020                     __pcstackBANK0:	
   357  0020                     main@str:	
   358                           
   359                           ; 1 bytes @ 0x0
   360  0020                     	ds	1
   361  0021                     main@str2:	
   362                           
   363                           ; 1 bytes @ 0x1
   364  0021                     	ds	1
   365  0022                     main@str3:	
   366                           
   367                           ; 1 bytes @ 0x2
   368  0022                     	ds	1
   369  0023                     main@str4:	
   370                           
   371                           ; 1 bytes @ 0x3
   372  0023                     	ds	1
   373                           
   374                           	psect	maintext
   375  077C                     __pmaintext:	
   376 ;;
   377 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   378 ;;
   379 ;; *************** function _main *****************
   380 ;; Defined at:
   381 ;;		line 108 in file "newmain.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;  str4            1    3[BANK0 ] PTR unsigned char 
   386 ;;		 -> STR_4(4), 
   387 ;;  str3            1    2[BANK0 ] PTR unsigned char 
   388 ;;		 -> STR_3(6), 
   389 ;;  str2            1    1[BANK0 ] PTR unsigned char 
   390 ;;		 -> STR_2(7), 
   391 ;;  str             1    0[BANK0 ] PTR unsigned char 
   392 ;;		 -> STR_1(6), 
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   397 ;; Tracked objects:
   398 ;;		On entry : B00/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   402 ;;      Params:         0       0       0       0       0
   403 ;;      Locals:         0       4       0       0       0
   404 ;;      Temps:          1       0       0       0       0
   405 ;;      Totals:         1       4       0       0       0
   406 ;;Total ram usage:        5 bytes
   407 ;; Hardware stack levels required when called:    3
   408 ;; This function calls:
   409 ;;		_delay
   410 ;;		_init
   411 ;;		_lcd_init
   412 ;;		_setCursorPos
   413 ;;		_writeString
   414 ;; This function is called by:
   415 ;;		Startup code after reset
   416 ;; This function uses a non-reentrant model
   417 ;;
   418                           
   419                           
   420                           ;psect for function _main
   421  077C                     _main:	
   422  077C                     l73:	
   423                           ;incstack = 0
   424                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   425                           ;newmain.c: 109:         setCursorPos(2, 2);
   426                           
   427                           
   428                           ;newmain.c: 110:         writeString(str2);
   429  077C  120A  118A  26BA  120A  118A  	fcall	_init
   430                           
   431                           ;newmain.c: 111: 
   432  0781  120A  118A  26C4  120A  118A  	fcall	_lcd_init
   433                           
   434                           ;newmain.c: 113:         setCursorPos(3, 2);
   435  0786  3016               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   436  0787  00FC               	movwf	??_main
   437  0788  087C               	movf	??_main,w
   438  0789  1283               	bcf	3,5	;RP0=0, select bank0
   439  078A  1303               	bcf	3,6	;RP1=0, select bank0
   440  078B  00A0               	movwf	main@str
   441                           
   442                           ;newmain.c: 114:         writeString(str3);
   443  078C  3001               	movlw	1
   444  078D  00F6               	movwf	setCursorPos@lineN
   445  078E  3000               	movlw	0
   446  078F  00F7               	movwf	setCursorPos@lineN+1
   447  0790  3002               	movlw	2
   448  0791  00F8               	movwf	setCursorPos@pos
   449  0792  3000               	movlw	0
   450  0793  00F9               	movwf	setCursorPos@pos+1
   451  0794  120A  118A  272A  120A  118A  	fcall	_setCursorPos
   452                           
   453                           ;newmain.c: 115: 
   454  0799  1283               	bcf	3,5	;RP0=0, select bank0
   455  079A  1303               	bcf	3,6	;RP1=0, select bank0
   456  079B  0820               	movf	main@str,w
   457  079C  120A  118A  2753  120A  118A  	fcall	_writeString
   458                           
   459                           ;newmain.c: 117:         setCursorPos(4, 2);
   460  07A1  3009               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   461  07A2  00FC               	movwf	??_main
   462  07A3  087C               	movf	??_main,w
   463  07A4  1283               	bcf	3,5	;RP0=0, select bank0
   464  07A5  1303               	bcf	3,6	;RP1=0, select bank0
   465  07A6  00A1               	movwf	main@str2
   466                           
   467                           ;newmain.c: 118:         writeString(str4);
   468  07A7  3002               	movlw	2
   469  07A8  00F6               	movwf	setCursorPos@lineN
   470  07A9  3000               	movlw	0
   471  07AA  00F7               	movwf	setCursorPos@lineN+1
   472  07AB  3002               	movlw	2
   473  07AC  00F8               	movwf	setCursorPos@pos
   474  07AD  3000               	movlw	0
   475  07AE  00F9               	movwf	setCursorPos@pos+1
   476  07AF  120A  118A  272A  120A  118A  	fcall	_setCursorPos
   477                           
   478                           ;newmain.c: 119: 
   479  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   480  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   481  07B6  0821               	movf	main@str2,w
   482  07B7  120A  118A  2753  120A  118A  	fcall	_writeString
   483                           
   484                           ;newmain.c: 121:     }
   485  07BC  3010               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   486  07BD  00FC               	movwf	??_main
   487  07BE  087C               	movf	??_main,w
   488  07BF  1283               	bcf	3,5	;RP0=0, select bank0
   489  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   490  07C1  00A2               	movwf	main@str3
   491                           
   492                           ;newmain.c: 122: }
   493  07C2  3003               	movlw	3
   494  07C3  00F6               	movwf	setCursorPos@lineN
   495  07C4  3000               	movlw	0
   496  07C5  00F7               	movwf	setCursorPos@lineN+1
   497  07C6  3002               	movlw	2
   498  07C7  00F8               	movwf	setCursorPos@pos
   499  07C8  3000               	movlw	0
   500  07C9  00F9               	movwf	setCursorPos@pos+1
   501  07CA  120A  118A  272A  120A  118A  	fcall	_setCursorPos
   502  07CF  1283               	bcf	3,5	;RP0=0, select bank0
   503  07D0  1303               	bcf	3,6	;RP1=0, select bank0
   504  07D1  0822               	movf	main@str3,w
   505  07D2  120A  118A  2753  120A  118A  	fcall	_writeString
   506  07D7  301C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   507  07D8  00FC               	movwf	??_main
   508  07D9  087C               	movf	??_main,w
   509  07DA  1283               	bcf	3,5	;RP0=0, select bank0
   510  07DB  1303               	bcf	3,6	;RP1=0, select bank0
   511  07DC  00A3               	movwf	main@str4
   512  07DD  3004               	movlw	4
   513  07DE  00F6               	movwf	setCursorPos@lineN
   514  07DF  3000               	movlw	0
   515  07E0  00F7               	movwf	setCursorPos@lineN+1
   516  07E1  3002               	movlw	2
   517  07E2  00F8               	movwf	setCursorPos@pos
   518  07E3  3000               	movlw	0
   519  07E4  00F9               	movwf	setCursorPos@pos+1
   520  07E5  120A  118A  272A  120A  118A  	fcall	_setCursorPos
   521  07EA  1283               	bcf	3,5	;RP0=0, select bank0
   522  07EB  1303               	bcf	3,6	;RP1=0, select bank0
   523  07EC  0823               	movf	main@str4,w
   524  07ED  120A  118A  2753  120A  118A  	fcall	_writeString
   525  07F2  3010               	movlw	16
   526  07F3  00F0               	movwf	delay@t
   527  07F4  3027               	movlw	39
   528  07F5  00F1               	movwf	delay@t+1
   529  07F6  120A  118A  26FB  120A  118A  	fcall	_delay
   530  07FB  2F7C               	goto	l73
   531  07FC                     __end_of_main:	
   532                           
   533                           	psect	text1
   534  0753                     __ptext1:	
   535 ;; *************** function _writeString *****************
   536 ;; Defined at:
   537 ;;		line 76 in file "newmain.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;  str             1    wreg     PTR unsigned char 
   540 ;;		 -> STR_4(4), STR_3(6), STR_2(7), STR_1(6), 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  str             1    9[COMMON] PTR unsigned char 
   543 ;;		 -> STR_4(4), STR_3(6), STR_2(7), STR_1(6), 
   544 ;;  i               2    7[COMMON] int 
   545 ;; Return value:  Size  Location     Type
   546 ;;                  1    wreg      void 
   547 ;; Registers used:
   548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   549 ;; Tracked objects:
   550 ;;		On entry : 0/0
   551 ;;		On exit  : 0/0
   552 ;;		Unchanged: 0/0
   553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   554 ;;      Params:         0       0       0       0       0
   555 ;;      Locals:         3       0       0       0       0
   556 ;;      Temps:          1       0       0       0       0
   557 ;;      Totals:         4       0       0       0       0
   558 ;;Total ram usage:        4 bytes
   559 ;; Hardware stack levels used:    1
   560 ;; Hardware stack levels required when called:    2
   561 ;; This function calls:
   562 ;;		_strlen
   563 ;;		_writechar
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _writeString
   571  0753                     _writeString:	
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   575                           ;writeString@str stored from wreg
   576  0753  00F9               	movwf	writeString@str
   577                           
   578                           ;newmain.c: 77:     const int ln4 = 0xD8;
   579  0754  01F7               	clrf	writeString@i
   580  0755  01F8               	clrf	writeString@i+1
   581  0756                     l814:	
   582  0756  0879               	movf	writeString@str,w
   583  0757  120A  118A  2710  120A  118A  	fcall	_strlen
   584  075C  0878               	movf	writeString@i+1,w
   585  075D  3A80               	xorlw	128
   586  075E  00F6               	movwf	??_writeString
   587  075F  0871               	movf	?_strlen+1,w
   588  0760  3A80               	xorlw	128
   589  0761  0276               	subwf	??_writeString,w
   590  0762  1D03               	skipz
   591  0763  2F66               	goto	u105
   592  0764  0870               	movf	?_strlen,w
   593  0765  0277               	subwf	writeString@i,w
   594  0766                     u105:	
   595  0766  1803               	btfsc	3,0
   596  0767  0008               	return
   597                           
   598                           ;newmain.c: 78: 
   599  0768  0877               	movf	writeString@i,w
   600  0769  0779               	addwf	writeString@str,w
   601  076A  0084               	movwf	4
   602  076B  120A  118A  2003  120A  118A  	fcall	stringdir
   603  0770  120A  118A  26E8  120A  118A  	fcall	_writechar
   604                           
   605                           ;newmain.c: 79:     int addr;
   606  0775  3001               	movlw	1
   607  0776  07F7               	addwf	writeString@i,f
   608  0777  1803               	skipnc
   609  0778  0AF8               	incf	writeString@i+1,f
   610  0779  3000               	movlw	0
   611  077A  07F8               	addwf	writeString@i+1,f
   612  077B  2F56               	goto	l814
   613  077C                     __end_of_writeString:	
   614                           
   615                           	psect	text2
   616  06E8                     __ptext2:	
   617 ;; *************** function _writechar *****************
   618 ;; Defined at:
   619 ;;		line 40 in file "newmain.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;  x               1    wreg     unsigned char 
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  x               1    5[COMMON] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, status,2, status,0, pclath, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   633 ;;      Params:         0       0       0       0       0
   634 ;;      Locals:         1       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0
   636 ;;      Totals:         1       0       0       0       0
   637 ;;Total ram usage:        1 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    1
   640 ;; This function calls:
   641 ;;		_delay
   642 ;; This function is called by:
   643 ;;		_writeString
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _writechar
   649  06E8                     _writechar:	
   650                           
   651                           ;incstack = 0
   652                           ; Regs used in _writechar: [wreg+status,2+status,0+pclath+cstack]
   653                           ;writechar@x stored from wreg
   654  06E8  00F5               	movwf	writechar@x
   655                           
   656                           ;newmain.c: 42: 
   657  06E9  1283               	bcf	3,5	;RP0=0, select bank0
   658  06EA  1303               	bcf	3,6	;RP1=0, select bank0
   659  06EB  1685               	bsf	5,5	;volatile
   660                           
   661                           ;newmain.c: 43: void writecmd(char x) {
   662  06EC  1205               	bcf	5,4	;volatile
   663                           
   664                           ;newmain.c: 44:     RA5 = 0;
   665  06ED  0875               	movf	writechar@x,w
   666  06EE  0088               	movwf	8	;volatile
   667                           
   668                           ;newmain.c: 45:     RA4 = 0;
   669  06EF  1185               	bcf	5,3	;volatile
   670                           
   671                           ;newmain.c: 46:     PORTD = x;
   672  06F0  3070               	movlw	112
   673  06F1  00F0               	movwf	delay@t
   674  06F2  3017               	movlw	23
   675  06F3  00F1               	movwf	delay@t+1
   676  06F4  120A  118A  26FB   	fcall	_delay
   677                           
   678                           ;newmain.c: 47:     RA3 = 0;
   679  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   680  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   681  06F9  1585               	bsf	5,3	;volatile
   682  06FA  0008               	return
   683  06FB                     __end_of_writechar:	
   684                           
   685                           	psect	text3
   686  0710                     __ptext3:	
   687 ;; *************** function _strlen *****************
   688 ;; Defined at:
   689 ;;		line 69 in file "newmain.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  a               1    wreg     PTR unsigned char 
   692 ;;		 -> STR_4(4), STR_3(6), STR_2(7), STR_1(6), 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  a               1    3[COMMON] PTR unsigned char 
   695 ;;		 -> STR_4(4), STR_3(6), STR_2(7), STR_1(6), 
   696 ;;  len             2    4[COMMON] int 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  2    0[COMMON] int 
   699 ;; Registers used:
   700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   706 ;;      Params:         3       0       0       0       0
   707 ;;      Locals:         3       0       0       0       0
   708 ;;      Temps:          0       0       0       0       0
   709 ;;      Totals:         6       0       0       0       0
   710 ;;Total ram usage:        6 bytes
   711 ;; Hardware stack levels used:    2
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_writeString
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           
   720                           ;psect for function _strlen
   721  0710                     _strlen:	
   722                           
   723                           ;incstack = 0
   724                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   725                           ;strlen@a stored from wreg
   726  0710  00F3               	movwf	strlen@a
   727                           
   728                           ;newmain.c: 70:     }
   729  0711  01F4               	clrf	strlen@len
   730  0712  01F5               	clrf	strlen@len+1
   731  0713                     l792:	
   732                           ;newmain.c: 71: }
   733                           
   734                           
   735                           ;newmain.c: 71: }
   736  0713  0874               	movf	strlen@len,w
   737  0714  0773               	addwf	strlen@a,w
   738  0715  0084               	movwf	4
   739  0716  120A  118A  2003  120A  118A  	fcall	stringdir
   740  071B  3A00               	xorlw	0
   741  071C  1903               	btfsc	3,2
   742  071D  2F25               	goto	l794
   743                           
   744                           ;newmain.c: 72: 
   745  071E  3001               	movlw	1
   746  071F  07F4               	addwf	strlen@len,f
   747  0720  1803               	skipnc
   748  0721  0AF5               	incf	strlen@len+1,f
   749  0722  3000               	movlw	0
   750  0723  07F5               	addwf	strlen@len+1,f
   751  0724  2F13               	goto	l792
   752  0725                     l794:	
   753                           
   754                           ;newmain.c: 73: void setCursorPos(int lineN, int pos) {
   755  0725  0875               	movf	strlen@len+1,w
   756  0726  00F1               	movwf	?_strlen+1
   757  0727  0874               	movf	strlen@len,w
   758  0728  00F0               	movwf	?_strlen
   759  0729  0008               	return
   760  072A                     __end_of_strlen:	
   761                           
   762                           	psect	text4
   763  072A                     __ptext4:	
   764 ;; *************** function _setCursorPos *****************
   765 ;; Defined at:
   766 ;;		line 82 in file "newmain.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  lineN           2    6[COMMON] int 
   769 ;;  pos             2    8[COMMON] int 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  addr            2   10[COMMON] int 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0, pclath, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   781 ;;      Params:         4       0       0       0       0
   782 ;;      Locals:         2       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0
   784 ;;      Totals:         6       0       0       0       0
   785 ;;Total ram usage:        6 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    2
   788 ;; This function calls:
   789 ;;		_writecmd
   790 ;; This function is called by:
   791 ;;		_main
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           
   796                           ;psect for function _setCursorPos
   797  072A                     _setCursorPos:	
   798                           
   799                           ;newmain.c: 83:         addr = ln1 + pos;;newmain.c: 84:     } else if (lineN == 2) {;ne
      +                          wmain.c: 85: ;newmain.c: 86:         addr = ln2 + pos;;newmain.c: 88: ;newmain.c: 90:   
      +                            } else if (lineN == 4) {
   800                           
   801                           ;incstack = 0
   802                           ; Regs used in _setCursorPos: [wreg+status,2+status,0+pclath+cstack]
   803  072A  0376               	decf	setCursorPos@lineN,w
   804  072B  0477               	iorwf	setCursorPos@lineN+1,w
   805  072C  1D03               	btfss	3,2
   806  072D  2F31               	goto	l820
   807                           
   808                           ;newmain.c: 92:         addr = ln4 + pos;
   809  072E  0878               	movf	setCursorPos@pos,w
   810  072F  3EC0               	addlw	192
   811  0730  2F48               	goto	L3
   812  0731                     l820:	
   813                           ;newmain.c: 93:     }
   814                           
   815  0731  3002               	movlw	2
   816  0732  0676               	xorwf	setCursorPos@lineN,w
   817  0733  0477               	iorwf	setCursorPos@lineN+1,w
   818  0734  1D03               	btfss	3,2
   819  0735  2F39               	goto	l824
   820                           
   821                           ;newmain.c: 95:     writecmd(addr);
   822  0736  0878               	movf	setCursorPos@pos,w
   823  0737  3ED0               	addlw	208
   824  0738  2F48               	goto	L3
   825  0739                     l824:	
   826                           ;newmain.c: 96: }
   827                           
   828  0739  3003               	movlw	3
   829  073A  0676               	xorwf	setCursorPos@lineN,w
   830  073B  0477               	iorwf	setCursorPos@lineN+1,w
   831  073C  1D03               	btfss	3,2
   832  073D  2F41               	goto	l828
   833                           
   834                           ;newmain.c: 98: 
   835  073E  0878               	movf	setCursorPos@pos,w
   836  073F  3EC8               	addlw	200
   837  0740  2F48               	goto	L3
   838  0741                     l828:	
   839                           ;newmain.c: 99: void main() {
   840                           
   841  0741  3004               	movlw	4
   842  0742  0676               	xorwf	setCursorPos@lineN,w
   843  0743  0477               	iorwf	setCursorPos@lineN+1,w
   844  0744  1D03               	btfss	3,2
   845  0745  2F4E               	goto	l832
   846                           
   847                           ;newmain.c: 101:         init();
   848  0746  0878               	movf	setCursorPos@pos,w
   849  0747  3ED8               	addlw	216
   850  0748                     L3:	
   851  0748  00FA               	movwf	setCursorPos@addr
   852  0749  0879               	movf	setCursorPos@pos+1,w
   853  074A  1803               	skipnc
   854  074B  3E01               	addlw	1
   855  074C  3E00               	addlw	0
   856  074D  00FB               	movwf	setCursorPos@addr+1
   857  074E                     l832:	
   858                           
   859                           ;newmain.c: 104:         char *str = "Hello";
   860  074E  087A               	movf	setCursorPos@addr,w
   861  074F  120A  118A  26D5   	fcall	_writecmd
   862  0752  0008               	return
   863  0753                     __end_of_setCursorPos:	
   864                           
   865                           	psect	text5
   866  06C4                     __ptext5:	
   867 ;; *************** function _lcd_init *****************
   868 ;; Defined at:
   869 ;;		line 32 in file "newmain.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, pclath, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       0       0       0       0
   884 ;;      Locals:         0       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0
   886 ;;      Totals:         0       0       0       0       0
   887 ;;Total ram usage:        0 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    2
   890 ;; This function calls:
   891 ;;		_writecmd
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _lcd_init
   899  06C4                     _lcd_init:	
   900                           
   901                           ;newmain.c: 33:     RA5 = 1;
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   905  06C4  300F               	movlw	15
   906  06C5  120A  118A  26D5  120A  118A  	fcall	_writecmd
   907                           
   908                           ;newmain.c: 34:     RA4 = 0;
   909  06CA  3001               	movlw	1
   910  06CB  120A  118A  26D5  120A  118A  	fcall	_writecmd
   911                           
   912                           ;newmain.c: 35:     PORTD = x;
   913  06D0  3038               	movlw	56
   914  06D1  120A  118A  26D5   	fcall	_writecmd
   915  06D4  0008               	return
   916  06D5                     __end_of_lcd_init:	
   917                           
   918                           	psect	text6
   919  06D5                     __ptext6:	
   920 ;; *************** function _writecmd *****************
   921 ;; Defined at:
   922 ;;		line 52 in file "newmain.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  x               1    wreg     unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  x               1    5[COMMON] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0, pclath, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       0       0       0
   937 ;;      Locals:         1       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0
   939 ;;      Totals:         1       0       0       0       0
   940 ;;Total ram usage:        1 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    1
   943 ;; This function calls:
   944 ;;		_delay
   945 ;; This function is called by:
   946 ;;		_lcd_init
   947 ;;		_setCursorPos
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _writecmd
   953  06D5                     _writecmd:	
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _writecmd: [wreg+status,2+status,0+pclath+cstack]
   957                           ;writecmd@x stored from wreg
   958  06D5  00F5               	movwf	writecmd@x
   959                           
   960                           ;newmain.c: 53: 
   961  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   962  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   963  06D8  1285               	bcf	5,5	;volatile
   964                           
   965                           ;newmain.c: 54: void delay(int t) {
   966  06D9  1205               	bcf	5,4	;volatile
   967                           
   968                           ;newmain.c: 55:     int i;
   969  06DA  0875               	movf	writecmd@x,w
   970  06DB  0088               	movwf	8	;volatile
   971                           
   972                           ;newmain.c: 56:     for (i = 0; i < t; i++);
   973  06DC  1185               	bcf	5,3	;volatile
   974                           
   975                           ;newmain.c: 57: }
   976  06DD  3070               	movlw	112
   977  06DE  00F0               	movwf	delay@t
   978  06DF  3017               	movlw	23
   979  06E0  00F1               	movwf	delay@t+1
   980  06E1  120A  118A  26FB   	fcall	_delay
   981                           
   982                           ;newmain.c: 58: 
   983  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   984  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   985  06E6  1585               	bsf	5,3	;volatile
   986  06E7  0008               	return
   987  06E8                     __end_of_writecmd:	
   988                           
   989                           	psect	text7
   990  06FB                     __ptext7:	
   991 ;; *************** function _delay *****************
   992 ;; Defined at:
   993 ;;		line 63 in file "newmain.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  t               2    0[COMMON] int 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  i               2    3[COMMON] int 
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, status,2
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         2       0       0       0       0
  1008 ;;      Locals:         2       0       0       0       0
  1009 ;;      Temps:          1       0       0       0       0
  1010 ;;      Totals:         5       0       0       0       0
  1011 ;;Total ram usage:        5 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_writechar
  1017 ;;		_writecmd
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _delay
  1024  06FB                     _delay:	
  1025                           
  1026                           ;newmain.c: 64:     return len;;newmain.c: 65: }
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in _delay: [wreg+status,2]
  1030  06FB  01F3               	clrf	delay@i
  1031  06FC  01F4               	clrf	delay@i+1
  1032  06FD                     l35:	
  1033  06FD  0874               	movf	delay@i+1,w
  1034  06FE  3A80               	xorlw	128
  1035  06FF  00F2               	movwf	??_delay
  1036  0700  0871               	movf	delay@t+1,w
  1037  0701  3A80               	xorlw	128
  1038  0702  0272               	subwf	??_delay,w
  1039  0703  1D03               	skipz
  1040  0704  2F07               	goto	u85
  1041  0705  0870               	movf	delay@t,w
  1042  0706  0273               	subwf	delay@i,w
  1043  0707                     u85:	
  1044  0707  1803               	btfsc	3,0
  1045  0708  0008               	return
  1046  0709  3001               	movlw	1
  1047  070A  07F3               	addwf	delay@i,f
  1048  070B  1803               	skipnc
  1049  070C  0AF4               	incf	delay@i+1,f
  1050  070D  3000               	movlw	0
  1051  070E  07F4               	addwf	delay@i+1,f
  1052  070F  2EFD               	goto	l35
  1053  0710                     __end_of_delay:	
  1054                           
  1055                           	psect	text8
  1056  06BA                     __ptext8:	
  1057 ;; *************** function _init *****************
  1058 ;; Defined at:
  1059 ;;		line 23 in file "newmain.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, status,2
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         0       0       0       0       0
  1074 ;;      Locals:         0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0
  1076 ;;      Totals:         0       0       0       0       0
  1077 ;;Total ram usage:        0 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           
  1087                           ;psect for function _init
  1088  06BA                     _init:	
  1089                           
  1090                           ;newmain.c: 24:     writecmd(0x0F);
  1091                           
  1092                           ;incstack = 0
  1093                           ; Regs used in _init: [wreg+status,2]
  1094  06BA  3007               	movlw	7
  1095  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  1096  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  1097  06BD  009F               	movwf	31	;volatile
  1098                           
  1099                           ;newmain.c: 25:     writecmd(0x01);
  1100  06BE  0185               	clrf	5	;volatile
  1101                           
  1102                           ;newmain.c: 26:     writecmd(0x38);
  1103  06BF  0188               	clrf	8	;volatile
  1104                           
  1105                           ;newmain.c: 27: }
  1106  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1107  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1108  06C2  1505               	bsf	5,2	;volatile
  1109  06C3  0008               	return
  1110  06C4                     __end_of_init:	
  1111  007E                     btemp	set	126	;btemp
  1112  007E                     wtemp0	set	126


Data Sizes:
    Strings     23
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    main@str4	PTR unsigned char  size(1) Largest target is 4
		 -> STR_4(CODE[4]), 

    main@str3	PTR unsigned char  size(1) Largest target is 6
		 -> STR_3(CODE[6]), 

    main@str2	PTR unsigned char  size(1) Largest target is 7
		 -> STR_2(CODE[7]), 

    main@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    writeString@str	PTR unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[4]), STR_3(CODE[6]), STR_2(CODE[7]), STR_1(CODE[6]), 

    strlen@a	PTR unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[4]), STR_3(CODE[6]), STR_2(CODE[7]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_setCursorPos
    _writeString->_strlen
    _writeString->_writechar
    _writechar->_delay
    _setCursorPos->_writecmd
    _lcd_init->_writecmd
    _writecmd->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2387
                                             12 COMMON     1     1      0
                                              0 BANK0      4     4      0
                              _delay
                               _init
                           _lcd_init
                       _setCursorPos
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          4     4      0     619
                                              6 COMMON     4     4      0
                             _strlen
                          _writechar
 ---------------------------------------------------------------------------------
 (2) _writechar                                            1     1      0     296
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     3      3     101
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _setCursorPos                                         6     2      4    1106
                                              6 COMMON     6     2      4
                           _writecmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     296
                           _writecmd
 ---------------------------------------------------------------------------------
 (2) _writecmd                                             1     1      0     296
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     274
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay
   _init
   _lcd_init
     _writecmd
       _delay
   _setCursorPos
     _writecmd
       _delay
   _writeString
     _strlen
     _writechar
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Oct 28 17:38:54 2019

                      pc 0002                       l35 06FD                       l73 077C  
                     u85 0707                       fsr 0004                      l820 0731  
                    l814 0756                      l824 0739                      l832 074E  
                    l828 0741                      l792 0713                      l794 0725  
                    _RA2 002A                      _RA3 002B                      _RA4 002C  
                    _RA5 002D                      u105 0766                      fsr0 0004  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000                     STR_1 001E  
                   STR_2 0011                     STR_3 0018                     STR_4 0024  
                   _main 077C                     _init 06BA                     btemp 007E  
                   start 0000           writeString@str 0079                    ?_main 0070  
                  ?_init 0070            __CFG_WDTE$OFF 0000                    _PORTD 0008  
                  _TRISA 0085                    _TRISD 0088              _writeString 0753  
          __CFG_PWRTE$ON 0000                    _delay 06FB           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07FC             __end_of_init 06C4  
                 ??_main 007C                   ??_init 0070                   ?_delay 0070  
                 _ADCON1 009F         __end_of_lcd_init 06D5                   delay@i 0073  
                 delay@t 0070                   _strlen 0710         __end_of_writecmd 06E8  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 0710  
                ??_delay 0072            ?_setCursorPos 0076         setCursorPos@addr 007A  
             __pmaintext 077C                  ?_strlen 0070             ?_writeString 0070  
              ?_lcd_init 0070               __stringtab 0003           ??_setCursorPos 007A  
     __size_of_writechar 0013                  __ptext1 0753                  __ptext2 06E8  
                __ptext3 0710                  __ptext4 072A                  __ptext5 06C4  
                __ptext6 06D5                  __ptext7 06FB                  __ptext8 06BA  
              ?_writecmd 0070          __size_of_strlen 001A               ??_lcd_init 0076  
                main@str 0020     end_of_initialization 07FC                  strlen@a 0073  
             ??_writecmd 0075        __end_of_writechar 06FB             writeString@i 0077  
   __end_of_setCursorPos 0753           __end_of_strlen 072A      start_initialization 07FC  
   __size_of_writeString 0029                 ??_strlen 0073                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_lcd_init 0011        setCursorPos@lineN 0076  
        setCursorPos@ln1 000F          setCursorPos@ln2 000D          setCursorPos@ln3 000B  
        setCursorPos@ln4 0009          setCursorPos@pos 0078                __pstrings 0003  
      __size_of_writecmd 0013           __size_of_delay 0015    __size_of_setCursorPos 0029  
            __stringbase 0008                _writechar 06E8  __end_ofsetCursorPos@ln1 0011  
__end_ofsetCursorPos@ln2 000F  __end_ofsetCursorPos@ln3 000D  __end_ofsetCursorPos@ln4 000B  
           _setCursorPos 072A       __end_of__stringtab 0009               ?_writechar 0070  
               _lcd_init 06C4            __size_of_main 0080            __size_of_init 000A  
               main@str2 0021                 main@str3 0022                 main@str4 0023  
             writechar@x 0075                 _writecmd 06D5            ??_writeString 0076  
              strlen@len 0074                stringcode 0003                writecmd@x 0075  
               stringdir 0003                 stringtab 0003              ??_writechar 0075  
    __end_of_writeString 077C  
