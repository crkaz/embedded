

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Nov 01 16:33:35 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.10
    22                           ; Generated 31/07/2019 GMT
    23                           ; 
    24                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175                           
   176                           	psect	idataBANK0
   177  0731                     __pidataBANK0:	
   178                           
   179                           ;initializer for _table
   180  0731  34C0               	retlw	192
   181  0732  34F9               	retlw	249
   182  0733  34A4               	retlw	164
   183  0734  34B0               	retlw	176
   184  0735  3499               	retlw	153
   185  0736  3492               	retlw	146
   186  0737  3482               	retlw	130
   187  0738  34F8               	retlw	248
   188  0739  3480               	retlw	128
   189  073A  3490               	retlw	144
   190                           
   191                           ;initializer for _tUKus
   192  073B  340A               	retlw	10
   193  073C  3400               	retlw	0
   194  073D  3446               	retlw	70
   195  073E  3400               	retlw	0
   196                           
   197                           ;initializer for _t63us
   198  073F  3402               	retlw	2
   199  0740  3400               	retlw	0
   200  0741  3407               	retlw	7
   201  0742  3400               	retlw	0
   202                           
   203                           ;initializer for _t70us
   204  0743  3402               	retlw	2
   205  0744  3400               	retlw	0
   206  0745  3408               	retlw	8
   207  0746  3400               	retlw	0
   208                           
   209                           ;initializer for _t430us
   210  0747  3402               	retlw	2
   211  0748  3400               	retlw	0
   212  0749  343C               	retlw	60
   213  074A  3400               	retlw	0
   214                           
   215                           ;initializer for _t503us
   216  074B  3402               	retlw	2
   217  074C  3400               	retlw	0
   218  074D  3446               	retlw	70
   219  074E  3400               	retlw	0
   220                           
   221                           	psect	strings
   222  0003                     __pstrings:	
   223  0003                     stringtab:	
   224  0003                     __stringtab:	
   225  0003                     stringcode:	
   226                           ;	String table - string pointers are 1 byte each
   227                           
   228  0003                     stringdir:	
   229  0003  3000               	movlw	high stringdir
   230  0004  008A               	movwf	10
   231  0005  0804               	movf	4,w
   232  0006  0A84               	incf	4,f
   233  0007  0782               	addwf	2,f
   234  0008                     __stringbase:	
   235  0008  3400               	retlw	0
   236  0009                     __end_of__stringtab:	
   237  0009                     setCursorPos@ln4:	
   238  0009  34D8               	retlw	216
   239  000A  3400               	retlw	0
   240  000B                     __end_ofsetCursorPos@ln4:	
   241  000B                     setCursorPos@ln3:	
   242  000B  34C8               	retlw	200
   243  000C  3400               	retlw	0
   244  000D                     __end_ofsetCursorPos@ln3:	
   245  000D                     setCursorPos@ln2:	
   246  000D  34D0               	retlw	208
   247  000E  3400               	retlw	0
   248  000F                     __end_ofsetCursorPos@ln2:	
   249  000F                     setCursorPos@ln1:	
   250  000F  34C0               	retlw	192
   251  0010  3400               	retlw	0
   252  0011                     __end_ofsetCursorPos@ln1:	
   253  0005                     _PORTA	set	5
   254  0008                     _PORTD	set	8
   255  0030                     _RB0	set	48
   256  002B                     _RA3	set	43
   257  002C                     _RA4	set	44
   258  002D                     _RA5	set	45
   259  0028                     _RA0	set	40
   260  002A                     _RA2	set	42
   261  0088                     _TRISD	set	136
   262  0085                     _TRISA	set	133
   263  009F                     _ADCON1	set	159
   264  0430                     _TRISB0	set	1072
   265  0011                     STR_1:	
   266  0011  3448               	retlw	72	;'H'
   267  0012  3465               	retlw	101	;'e'
   268  0013  346C               	retlw	108	;'l'
   269  0014  346C               	retlw	108	;'l'
   270  0015  346F               	retlw	111	;'o'
   271  0016  3400               	retlw	0
   272                           
   273                           ; #config settings
   274  0000                     
   275                           	psect	cinit
   276  07E1                     start_initialization:	
   277  07E1                     __initialization:	
   278                           
   279                           ; Initialize objects allocated to BANK0
   280  07E1  1383               	bcf	3,7	;select IRP bank0
   281  07E2  303E               	movlw	low (__pdataBANK0+30)
   282  07E3  00FD               	movwf	btemp+-1
   283  07E4  3007               	movlw	high __pidataBANK0
   284  07E5  00FE               	movwf	btemp
   285  07E6  3031               	movlw	low __pidataBANK0
   286  07E7  00FF               	movwf	btemp+1
   287  07E8  3020               	movlw	low __pdataBANK0
   288  07E9  0084               	movwf	4
   289  07EA  120A  118A  26C4  120A  118A  	fcall	init_ram0
   290                           
   291                           ; Clear objects allocated to BANK0
   292  07EF  01BE               	clrf	__pbssBANK0& (0+127)
   293  07F0  01BF               	clrf	(__pbssBANK0+1)& (0+127)
   294  07F1  01C0               	clrf	(__pbssBANK0+2)& (0+127)
   295  07F2  01C1               	clrf	(__pbssBANK0+3)& (0+127)
   296  07F3  01C2               	clrf	(__pbssBANK0+4)& (0+127)
   297  07F4  01C3               	clrf	(__pbssBANK0+5)& (0+127)
   298  07F5  01C4               	clrf	(__pbssBANK0+6)& (0+127)
   299  07F6  01C5               	clrf	(__pbssBANK0+7)& (0+127)
   300  07F7  01C6               	clrf	(__pbssBANK0+8)& (0+127)
   301  07F8  01C7               	clrf	(__pbssBANK0+9)& (0+127)
   302  07F9  01C8               	clrf	(__pbssBANK0+10)& (0+127)
   303  07FA  01C9               	clrf	(__pbssBANK0+11)& (0+127)
   304  07FB  01CA               	clrf	(__pbssBANK0+12)& (0+127)
   305  07FC                     end_of_initialization:	
   306                           ;End of C runtime variable initialization code
   307                           
   308  07FC                     __end_of__initialization:	
   309  07FC  0183               	clrf	3
   310  07FD  120A  118A  2F4F   	ljmp	_main	;jump to C main() function
   311                           
   312                           	psect	bssBANK0
   313  003E                     __pbssBANK0:	
   314  003E                     _wd:	
   315  003E                     	ds	2
   316  0040                     read_byte@j:	
   317  0040                     	ds	1
   318  0041                     _pt10000:	
   319  0041                     	ds	1
   320  0042                     _pt1000:	
   321  0042                     	ds	1
   322  0043                     _pt100:	
   323  0043                     	ds	1
   324  0044                     _pt10:	
   325  0044                     	ds	1
   326  0045                     _intEntries:	
   327  0045                     	ds	1
   328  0046                     _tens:	
   329  0046                     	ds	1
   330  0047                     _TX:	
   331  0047                     	ds	1
   332  0048                     _TZ:	
   333  0048                     	ds	1
   334  0049                     _THV:	
   335  0049                     	ds	1
   336  004A                     _TLV:	
   337  004A                     	ds	1
   338                           
   339                           	psect	dataBANK0
   340  0020                     __pdataBANK0:	
   341  0020                     _table:	
   342  0020                     	ds	10
   343  002A                     _tUKus:	
   344  002A                     	ds	4
   345  002E                     _t63us:	
   346  002E                     	ds	4
   347  0032                     _t70us:	
   348  0032                     	ds	4
   349  0036                     _t430us:	
   350  0036                     	ds	4
   351  003A                     _t503us:	
   352  003A                     	ds	4
   353                           
   354                           	psect	inittext
   355  06C0                     init_fetch0:	
   356                           ;	Called with low address in FSR and high address in W
   357                           
   358  06C0  087E               	movf	btemp,w
   359  06C1  008A               	movwf	10
   360  06C2  087F               	movf	btemp+1,w
   361  06C3  0082               	movwf	2
   362  06C4                     init_ram0:	
   363                           ;Called with:
   364                           ;	high address of idata address in btemp 
   365                           ;	low address of idata address in btemp+1 
   366                           ;	low address of data in FSR
   367                           ;	high address + 1 of data in btemp-1
   368                           
   369  06C4  120A  118A  26C0  120A  118A  	fcall	init_fetch0
   370  06C9  0080               	movwf	0
   371  06CA  0A84               	incf	4,f
   372  06CB  0804               	movf	4,w
   373  06CC  067D               	xorwf	btemp+-1,w
   374  06CD  1903               	btfsc	3,2
   375  06CE  3400               	retlw	0
   376  06CF  0AFF               	incf	btemp+1,f
   377  06D0  1903               	btfsc	3,2
   378  06D1  0AFE               	incf	btemp,f
   379  06D2  2EC4               	goto	init_ram0
   380                           
   381                           	psect	cstackCOMMON
   382  0070                     __pcstackCOMMON:	
   383  0070                     ?_writecmd:	
   384  0070                     ?_delay:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_init:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_init:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_writechar:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_writeString:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_main:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_strlen:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     delay@t:	
   406                           ; 2 bytes @ 0x0
   407                           
   408                           
   409                           ; 2 bytes @ 0x0
   410  0070                     	ds	2
   411  0072                     ??_delay:	
   412                           
   413                           ; 1 bytes @ 0x2
   414  0072                     	ds	1
   415  0073                     ??_strlen:	
   416  0073                     strlen@a:	
   417                           ; 1 bytes @ 0x3
   418                           
   419  0073                     delay@i:	
   420                           ; 1 bytes @ 0x3
   421                           
   422                           
   423                           ; 2 bytes @ 0x3
   424  0073                     	ds	1
   425  0074                     strlen@len:	
   426                           
   427                           ; 2 bytes @ 0x4
   428  0074                     	ds	1
   429  0075                     ??_writecmd:	
   430  0075                     ??_writechar:	
   431                           ; 1 bytes @ 0x5
   432                           
   433  0075                     writechar@x:	
   434                           ; 1 bytes @ 0x5
   435                           
   436  0075                     writecmd@x:	
   437                           ; 1 bytes @ 0x5
   438                           
   439                           
   440                           ; 1 bytes @ 0x5
   441  0075                     	ds	1
   442  0076                     ??_writeString:	
   443  0076                     ?_setCursorPos:	
   444                           ; 1 bytes @ 0x6
   445                           
   446  0076                     setCursorPos@lineN:	
   447                           ; 1 bytes @ 0x6
   448                           
   449                           
   450                           ; 2 bytes @ 0x6
   451  0076                     	ds	1
   452  0077                     writeString@i:	
   453                           
   454                           ; 2 bytes @ 0x7
   455  0077                     	ds	1
   456  0078                     setCursorPos@pos:	
   457                           
   458                           ; 2 bytes @ 0x8
   459  0078                     	ds	1
   460  0079                     writeString@str:	
   461                           
   462                           ; 1 bytes @ 0x9
   463  0079                     	ds	1
   464  007A                     ??_setCursorPos:	
   465  007A                     setCursorPos@addr:	
   466                           ; 1 bytes @ 0xA
   467                           
   468                           
   469                           ; 2 bytes @ 0xA
   470  007A                     	ds	2
   471  007C                     ??_main:	
   472                           
   473                           ; 1 bytes @ 0xC
   474  007C                     	ds	1
   475  007D                     main@str:	
   476                           
   477                           ; 1 bytes @ 0xD
   478  007D                     	ds	1
   479                           
   480                           	psect	maintext
   481  074F                     __pmaintext:	
   482 ;;
   483 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   484 ;;
   485 ;; *************** function _main *****************
   486 ;; Defined at:
   487 ;;		line 287 in file "newmain.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  str             1   13[COMMON] PTR unsigned char 
   492 ;;		 -> STR_1(6), 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : B00/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         0       0       0       0       0
   503 ;;      Locals:         1       0       0       0       0
   504 ;;      Temps:          1       0       0       0       0
   505 ;;      Totals:         2       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels required when called:    3
   508 ;; This function calls:
   509 ;;		_init
   510 ;;		_setCursorPos
   511 ;;		_writeString
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           
   518                           ;psect for function _main
   519  074F                     _main:	
   520  074F                     l1322:	
   521                           ;incstack = 0
   522                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   523                           
   524                           
   525                           ;newmain.c: 288:     init();
   526  074F  120A  118A  26B6  120A  118A  	fcall	_init
   527  0754                     l1324:	
   528                           
   529                           ;newmain.c: 294:         char *str = "Hello";
   530  0754  3009               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   531  0755  00FC               	movwf	??_main
   532  0756  087C               	movf	??_main,w
   533  0757  00FD               	movwf	main@str
   534  0758                     l1326:	
   535                           
   536                           ;newmain.c: 295:         setCursorPos(1, 2);
   537  0758  3001               	movlw	1
   538  0759  00F6               	movwf	setCursorPos@lineN
   539  075A  3000               	movlw	0
   540  075B  00F7               	movwf	setCursorPos@lineN+1
   541  075C  3002               	movlw	2
   542  075D  00F8               	movwf	setCursorPos@pos
   543  075E  3000               	movlw	0
   544  075F  00F9               	movwf	setCursorPos@pos+1
   545  0760  120A  118A  279B  120A  118A  	fcall	_setCursorPos
   546  0765                     l1328:	
   547                           
   548                           ;newmain.c: 296:         writeString(str);
   549  0765  087D               	movf	main@str,w
   550  0766  120A  118A  276F  120A  118A  	fcall	_writeString
   551  076B  2F54               	goto	l1324
   552  076C  120A  118A  2800   	ljmp	start
   553  076F                     __end_of_main:	
   554                           
   555                           	psect	text1
   556  076F                     __ptext1:	
   557 ;; *************** function _writeString *****************
   558 ;; Defined at:
   559 ;;		line 103 in file "newmain.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;  str             1    wreg     PTR unsigned char 
   562 ;;		 -> STR_1(6), 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  str             1    9[COMMON] PTR unsigned char 
   565 ;;		 -> STR_1(6), 
   566 ;;  i               2    7[COMMON] int 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   576 ;;      Params:         0       0       0       0       0
   577 ;;      Locals:         3       0       0       0       0
   578 ;;      Temps:          1       0       0       0       0
   579 ;;      Totals:         4       0       0       0       0
   580 ;;Total ram usage:        4 bytes
   581 ;; Hardware stack levels used:    1
   582 ;; Hardware stack levels required when called:    2
   583 ;; This function calls:
   584 ;;		_strlen
   585 ;;		_writechar
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           
   592                           ;psect for function _writeString
   593  076F                     _writeString:	
   594                           
   595                           ;incstack = 0
   596                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   597                           ;writeString@str stored from wreg
   598  076F  00F9               	movwf	writeString@str
   599  0770                     l1088:	
   600                           
   601                           ;newmain.c: 104:     for (int i = 0; i < strlen(str); ++i) {
   602  0770  01F7               	clrf	writeString@i
   603  0771  01F8               	clrf	writeString@i+1
   604  0772  2F86               	goto	l1094
   605  0773                     l1090:	
   606                           
   607                           ;newmain.c: 105:         writechar(str[i]);
   608  0773  0877               	movf	writeString@i,w
   609  0774  0779               	addwf	writeString@str,w
   610  0775  0084               	movwf	4
   611  0776  120A  118A  2003  120A  118A  	fcall	stringdir
   612  077B  120A  118A  26E8  120A  118A  	fcall	_writechar
   613  0780                     l1092:	
   614                           
   615                           ;newmain.c: 106:     }
   616  0780  3001               	movlw	1
   617  0781  07F7               	addwf	writeString@i,f
   618  0782  1803               	skipnc
   619  0783  0AF8               	incf	writeString@i+1,f
   620  0784  3000               	movlw	0
   621  0785  07F8               	addwf	writeString@i+1,f
   622  0786                     l1094:	
   623  0786  0879               	movf	writeString@str,w
   624  0787  120A  118A  2715  120A  118A  	fcall	_strlen
   625  078C  0878               	movf	writeString@i+1,w
   626  078D  3A80               	xorlw	128
   627  078E  00F6               	movwf	??_writeString
   628  078F  0871               	movf	?_strlen+1,w
   629  0790  3A80               	xorlw	128
   630  0791  0276               	subwf	??_writeString,w
   631  0792  1D03               	skipz
   632  0793  2F96               	goto	u285
   633  0794  0870               	movf	?_strlen,w
   634  0795  0277               	subwf	writeString@i,w
   635  0796                     u285:	
   636  0796  1C03               	skipc
   637  0797  2F99               	goto	u281
   638  0798  2F9A               	goto	u280
   639  0799                     u281:	
   640  0799  2F73               	goto	l1090
   641  079A                     u280:	
   642  079A                     l94:	
   643  079A  0008               	return
   644  079B                     __end_of_writeString:	
   645                           
   646                           	psect	text2
   647  06E8                     __ptext2:	
   648 ;; *************** function _writechar *****************
   649 ;; Defined at:
   650 ;;		line 67 in file "newmain.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;  x               1    wreg     unsigned char 
   653 ;; Auto vars:     Size  Location     Type
   654 ;;  x               1    5[COMMON] unsigned char 
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg, status,2, status,0, pclath, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   664 ;;      Params:         0       0       0       0       0
   665 ;;      Locals:         1       0       0       0       0
   666 ;;      Temps:          0       0       0       0       0
   667 ;;      Totals:         1       0       0       0       0
   668 ;;Total ram usage:        1 bytes
   669 ;; Hardware stack levels used:    1
   670 ;; Hardware stack levels required when called:    1
   671 ;; This function calls:
   672 ;;		_delay
   673 ;; This function is called by:
   674 ;;		_writeString
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           
   679                           ;psect for function _writechar
   680  06E8                     _writechar:	
   681                           
   682                           ;incstack = 0
   683                           ; Regs used in _writechar: [wreg+status,2+status,0+pclath+cstack]
   684                           ;writechar@x stored from wreg
   685  06E8  00F5               	movwf	writechar@x
   686  06E9                     l1060:	
   687                           
   688                           ;newmain.c: 69:     RA5 = 1;
   689  06E9  1283               	bcf	3,5	;RP0=0, select bank0
   690  06EA  1303               	bcf	3,6	;RP1=0, select bank0
   691  06EB  1685               	bsf	5,5	;volatile
   692                           
   693                           ;newmain.c: 70:     RA4 = 0;
   694  06EC  1205               	bcf	5,4	;volatile
   695  06ED                     l1062:	
   696                           
   697                           ;newmain.c: 71:     PORTD = x;
   698  06ED  0875               	movf	writechar@x,w
   699  06EE  0088               	movwf	8	;volatile
   700  06EF                     l1064:	
   701                           
   702                           ;newmain.c: 72:     RA3 = 0;
   703  06EF  1185               	bcf	5,3	;volatile
   704  06F0                     l1066:	
   705                           
   706                           ;newmain.c: 73:     delay(6000);
   707  06F0  3070               	movlw	112
   708  06F1  00F0               	movwf	delay@t
   709  06F2  3017               	movlw	23
   710  06F3  00F1               	movwf	delay@t+1
   711  06F4  120A  118A  26FD  120A  118A  	fcall	_delay
   712  06F9                     l1068:	
   713                           
   714                           ;newmain.c: 74:     RA3 = 1;
   715  06F9  1283               	bcf	3,5	;RP0=0, select bank0
   716  06FA  1303               	bcf	3,6	;RP1=0, select bank0
   717  06FB  1585               	bsf	5,3	;volatile
   718  06FC                     l73:	
   719  06FC  0008               	return
   720  06FD                     __end_of_writechar:	
   721                           
   722                           	psect	text3
   723  0715                     __ptext3:	
   724 ;; *************** function _strlen *****************
   725 ;; Defined at:
   726 ;;		line 96 in file "newmain.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  a               1    wreg     PTR unsigned char 
   729 ;;		 -> STR_1(6), 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  a               1    3[COMMON] PTR unsigned char 
   732 ;;		 -> STR_1(6), 
   733 ;;  len             2    4[COMMON] int 
   734 ;; Return value:  Size  Location     Type
   735 ;;                  2    0[COMMON] int 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   743 ;;      Params:         3       0       0       0       0
   744 ;;      Locals:         3       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0
   746 ;;      Totals:         6       0       0       0       0
   747 ;;Total ram usage:        6 bytes
   748 ;; Hardware stack levels used:    2
   749 ;; This function calls:
   750 ;;		Nothing
   751 ;; This function is called by:
   752 ;;		_writeString
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           
   757                           ;psect for function _strlen
   758  0715                     _strlen:	
   759                           
   760                           ;incstack = 0
   761                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   762                           ;strlen@a stored from wreg
   763  0715  00F3               	movwf	strlen@a
   764  0716                     l1070:	
   765                           
   766                           ;newmain.c: 97:     int len = 0;
   767  0716  01F4               	clrf	strlen@len
   768  0717  01F5               	clrf	strlen@len+1
   769                           
   770                           ;newmain.c: 98:     while (a[len])
   771  0718  2F1F               	goto	l1074
   772  0719                     l1072:	
   773                           
   774                           ;newmain.c: 99:         len++;
   775  0719  3001               	movlw	1
   776  071A  07F4               	addwf	strlen@len,f
   777  071B  1803               	skipnc
   778  071C  0AF5               	incf	strlen@len+1,f
   779  071D  3000               	movlw	0
   780  071E  07F5               	addwf	strlen@len+1,f
   781  071F                     l1074:	
   782                           
   783                           ;newmain.c: 98:     while (a[len])
   784  071F  0874               	movf	strlen@len,w
   785  0720  0773               	addwf	strlen@a,w
   786  0721  0084               	movwf	4
   787  0722  120A  118A  2003  120A  118A  	fcall	stringdir
   788  0727  3A00               	xorlw	0
   789  0728  1D03               	skipz
   790  0729  2F2B               	goto	u251
   791  072A  2F2C               	goto	u250
   792  072B                     u251:	
   793  072B  2F19               	goto	l1072
   794  072C                     u250:	
   795  072C                     l1076:	
   796                           
   797                           ;newmain.c: 100:     return len;
   798  072C  0875               	movf	strlen@len+1,w
   799  072D  00F1               	movwf	?_strlen+1
   800  072E  0874               	movf	strlen@len,w
   801  072F  00F0               	movwf	?_strlen
   802  0730                     l88:	
   803  0730  0008               	return
   804  0731                     __end_of_strlen:	
   805                           
   806                           	psect	text4
   807  079B                     __ptext4:	
   808 ;; *************** function _setCursorPos *****************
   809 ;; Defined at:
   810 ;;		line 109 in file "newmain.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  lineN           2    6[COMMON] int 
   813 ;;  pos             2    8[COMMON] int 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  addr            2   10[COMMON] int 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         4       0       0       0       0
   826 ;;      Locals:         2       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0
   828 ;;      Totals:         6       0       0       0       0
   829 ;;Total ram usage:        6 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    2
   832 ;; This function calls:
   833 ;;		_writecmd
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _setCursorPos
   841  079B                     _setCursorPos:	
   842  079B                     l1096:	
   843                           ;incstack = 0
   844                           ; Regs used in _setCursorPos: [wreg+status,2+status,0+pclath+cstack]
   845                           
   846                           
   847                           ;newmain.c: 110:     const int ln1 = 0xC0;;newmain.c: 111:     const int ln2 = 0xD0;;new
      +                          main.c: 112:     const int ln3 = 0xC8;;newmain.c: 113:     const int ln4 = 0xD8;;newmain
      +                          .c: 115:     int addr;;newmain.c: 117:     if (lineN == 1) {
   848  079B  0376               	decf	setCursorPos@lineN,w
   849  079C  0477               	iorwf	setCursorPos@lineN+1,w
   850  079D  1D03               	btfss	3,2
   851  079E  2FA0               	goto	u291
   852  079F  2FA1               	goto	u290
   853  07A0                     u291:	
   854  07A0  2FAA               	goto	l1100
   855  07A1                     u290:	
   856  07A1                     l1098:	
   857                           
   858                           ;newmain.c: 119:         addr = ln1 + pos;
   859  07A1  0878               	movf	setCursorPos@pos,w
   860  07A2  3EC0               	addlw	192
   861  07A3  00FA               	movwf	setCursorPos@addr
   862  07A4  0879               	movf	setCursorPos@pos+1,w
   863  07A5  1803               	skipnc
   864  07A6  3E01               	addlw	1
   865  07A7  3E00               	addlw	0
   866  07A8  00FB               	movwf	setCursorPos@addr+1
   867                           
   868                           ;newmain.c: 120:     } else if (lineN == 2) {
   869  07A9  2FDA               	goto	l1112
   870  07AA                     l1100:	
   871  07AA  3002               	movlw	2
   872  07AB  0676               	xorwf	setCursorPos@lineN,w
   873  07AC  0477               	iorwf	setCursorPos@lineN+1,w
   874  07AD  1D03               	btfss	3,2
   875  07AE  2FB0               	goto	u301
   876  07AF  2FB1               	goto	u300
   877  07B0                     u301:	
   878  07B0  2FBA               	goto	l1104
   879  07B1                     u300:	
   880  07B1                     l1102:	
   881                           
   882                           ;newmain.c: 122:         addr = ln2 + pos;
   883  07B1  0878               	movf	setCursorPos@pos,w
   884  07B2  3ED0               	addlw	208
   885  07B3  00FA               	movwf	setCursorPos@addr
   886  07B4  0879               	movf	setCursorPos@pos+1,w
   887  07B5  1803               	skipnc
   888  07B6  3E01               	addlw	1
   889  07B7  3E00               	addlw	0
   890  07B8  00FB               	movwf	setCursorPos@addr+1
   891                           
   892                           ;newmain.c: 123:     } else if (lineN == 3) {
   893  07B9  2FDA               	goto	l1112
   894  07BA                     l1104:	
   895  07BA  3003               	movlw	3
   896  07BB  0676               	xorwf	setCursorPos@lineN,w
   897  07BC  0477               	iorwf	setCursorPos@lineN+1,w
   898  07BD  1D03               	btfss	3,2
   899  07BE  2FC0               	goto	u311
   900  07BF  2FC1               	goto	u310
   901  07C0                     u311:	
   902  07C0  2FCA               	goto	l1108
   903  07C1                     u310:	
   904  07C1                     l1106:	
   905                           
   906                           ;newmain.c: 125:         addr = ln3 + pos;
   907  07C1  0878               	movf	setCursorPos@pos,w
   908  07C2  3EC8               	addlw	200
   909  07C3  00FA               	movwf	setCursorPos@addr
   910  07C4  0879               	movf	setCursorPos@pos+1,w
   911  07C5  1803               	skipnc
   912  07C6  3E01               	addlw	1
   913  07C7  3E00               	addlw	0
   914  07C8  00FB               	movwf	setCursorPos@addr+1
   915                           
   916                           ;newmain.c: 126:     } else if (lineN == 4) {
   917  07C9  2FDA               	goto	l1112
   918  07CA                     l1108:	
   919  07CA  3004               	movlw	4
   920  07CB  0676               	xorwf	setCursorPos@lineN,w
   921  07CC  0477               	iorwf	setCursorPos@lineN+1,w
   922  07CD  1D03               	btfss	3,2
   923  07CE  2FD0               	goto	u321
   924  07CF  2FD1               	goto	u320
   925  07D0                     u321:	
   926  07D0  2FDA               	goto	l108
   927  07D1                     u320:	
   928  07D1                     l1110:	
   929                           
   930                           ;newmain.c: 128:         addr = ln4 + pos;
   931  07D1  0878               	movf	setCursorPos@pos,w
   932  07D2  3ED8               	addlw	216
   933  07D3  00FA               	movwf	setCursorPos@addr
   934  07D4  0879               	movf	setCursorPos@pos+1,w
   935  07D5  1803               	skipnc
   936  07D6  3E01               	addlw	1
   937  07D7  3E00               	addlw	0
   938  07D8  00FB               	movwf	setCursorPos@addr+1
   939  07D9  2FDA               	goto	l1112
   940  07DA                     l108:	
   941  07DA                     l1112:	
   942                           
   943                           ;newmain.c: 131:     writecmd(addr);
   944  07DA  087A               	movf	setCursorPos@addr,w
   945  07DB  120A  118A  26D3  120A  118A  	fcall	_writecmd
   946  07E0                     l112:	
   947  07E0  0008               	return
   948  07E1                     __end_of_setCursorPos:	
   949                           
   950                           	psect	text5
   951  06D3                     __ptext5:	
   952 ;; *************** function _writecmd *****************
   953 ;; Defined at:
   954 ;;		line 79 in file "newmain.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  x               1    wreg     unsigned char 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  x               1    5[COMMON] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   968 ;;      Params:         0       0       0       0       0
   969 ;;      Locals:         1       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0
   971 ;;      Totals:         1       0       0       0       0
   972 ;;Total ram usage:        1 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    1
   975 ;; This function calls:
   976 ;;		_delay
   977 ;; This function is called by:
   978 ;;		_setCursorPos
   979 ;;		_lcd_init
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           
   984                           ;psect for function _writecmd
   985  06D3                     _writecmd:	
   986                           
   987                           ;incstack = 0
   988                           ; Regs used in _writecmd: [wreg+status,2+status,0+pclath+cstack]
   989                           ;writecmd@x stored from wreg
   990  06D3  00F5               	movwf	writecmd@x
   991  06D4                     l1050:	
   992                           
   993                           ;newmain.c: 80:     RA5 = 0;
   994  06D4  1283               	bcf	3,5	;RP0=0, select bank0
   995  06D5  1303               	bcf	3,6	;RP1=0, select bank0
   996  06D6  1285               	bcf	5,5	;volatile
   997                           
   998                           ;newmain.c: 81:     RA4 = 0;
   999  06D7  1205               	bcf	5,4	;volatile
  1000  06D8                     l1052:	
  1001                           
  1002                           ;newmain.c: 82:     PORTD = x;
  1003  06D8  0875               	movf	writecmd@x,w
  1004  06D9  0088               	movwf	8	;volatile
  1005  06DA                     l1054:	
  1006                           
  1007                           ;newmain.c: 83:     RA3 = 0;
  1008  06DA  1185               	bcf	5,3	;volatile
  1009  06DB                     l1056:	
  1010                           
  1011                           ;newmain.c: 84:     delay(6000);
  1012  06DB  3070               	movlw	112
  1013  06DC  00F0               	movwf	delay@t
  1014  06DD  3017               	movlw	23
  1015  06DE  00F1               	movwf	delay@t+1
  1016  06DF  120A  118A  26FD  120A  118A  	fcall	_delay
  1017  06E4                     l1058:	
  1018                           
  1019                           ;newmain.c: 85:     RA3 = 1;
  1020  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  1021  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  1022  06E6  1585               	bsf	5,3	;volatile
  1023  06E7                     l76:	
  1024  06E7  0008               	return
  1025  06E8                     __end_of_writecmd:	
  1026                           
  1027                           	psect	text6
  1028  06FD                     __ptext6:	
  1029 ;; *************** function _delay *****************
  1030 ;; Defined at:
  1031 ;;		line 90 in file "newmain.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  t               2    0[COMMON] int 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  i               2    3[COMMON] int 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1045 ;;      Params:         2       0       0       0       0
  1046 ;;      Locals:         2       0       0       0       0
  1047 ;;      Temps:          1       0       0       0       0
  1048 ;;      Totals:         5       0       0       0       0
  1049 ;;Total ram usage:        5 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_writechar
  1055 ;;		_writecmd
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _delay
  1061  06FD                     _delay:	
  1062  06FD                     l1046:	
  1063                           ;incstack = 0
  1064                           ; Regs used in _delay: [wreg+status,2]
  1065                           
  1066                           
  1067                           ;newmain.c: 91:     int i;;newmain.c: 92:     for (i = 0; i < t; i++);
  1068  06FD  01F3               	clrf	delay@i
  1069  06FE  01F4               	clrf	delay@i+1
  1070  06FF  2F06               	goto	l79
  1071  0700                     l1048:	
  1072  0700  3001               	movlw	1
  1073  0701  07F3               	addwf	delay@i,f
  1074  0702  1803               	skipnc
  1075  0703  0AF4               	incf	delay@i+1,f
  1076  0704  3000               	movlw	0
  1077  0705  07F4               	addwf	delay@i+1,f
  1078  0706                     l79:	
  1079  0706  0874               	movf	delay@i+1,w
  1080  0707  3A80               	xorlw	128
  1081  0708  00F2               	movwf	??_delay
  1082  0709  0871               	movf	delay@t+1,w
  1083  070A  3A80               	xorlw	128
  1084  070B  0272               	subwf	??_delay,w
  1085  070C  1D03               	skipz
  1086  070D  2F10               	goto	u245
  1087  070E  0870               	movf	delay@t,w
  1088  070F  0273               	subwf	delay@i,w
  1089  0710                     u245:	
  1090  0710  1C03               	skipc
  1091  0711  2F13               	goto	u241
  1092  0712  2F14               	goto	u240
  1093  0713                     u241:	
  1094  0713  2F00               	goto	l1048
  1095  0714                     u240:	
  1096  0714                     l82:	
  1097  0714  0008               	return
  1098  0715                     __end_of_delay:	
  1099                           
  1100                           	psect	text7
  1101  06B6                     __ptext7:	
  1102 ;; *************** function _init *****************
  1103 ;; Defined at:
  1104 ;;		line 48 in file "newmain.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1118 ;;      Params:         0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0
  1121 ;;      Totals:         0       0       0       0       0
  1122 ;;Total ram usage:        0 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           
  1132                           ;psect for function _init
  1133  06B6                     _init:	
  1134  06B6                     l796:	
  1135                           ;incstack = 0
  1136                           ; Regs used in _init: [wreg+status,2]
  1137                           
  1138                           
  1139                           ;newmain.c: 49:     ADCON1 = 0X07;
  1140  06B6  3007               	movlw	7
  1141  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  1142  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  1143  06B9  009F               	movwf	31	;volatile
  1144  06BA                     l798:	
  1145                           
  1146                           ;newmain.c: 50:     TRISA = 0X00;
  1147  06BA  0185               	clrf	5	;volatile
  1148  06BB                     l800:	
  1149                           
  1150                           ;newmain.c: 51:     TRISD = 0X00;
  1151  06BB  0188               	clrf	8	;volatile
  1152  06BC                     l802:	
  1153                           
  1154                           ;newmain.c: 52:     RA2 = 1;
  1155  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1156  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1157  06BE  1505               	bsf	5,2	;volatile
  1158  06BF                     l67:	
  1159  06BF  0008               	return
  1160  06C0                     __end_of_init:	
  1161  007E                     btemp	set	126	;btemp
  1162  007E                     wtemp0	set	126


Data Sizes:
    Strings     6
    Constant    8
    Data        30
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    main@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    writeString@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    strlen@a	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_setCursorPos
    _writeString->_strlen
    _writeString->_writechar
    _writechar->_delay
    _setCursorPos->_writecmd
    _writecmd->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1041
                                             12 COMMON     2     2      0
                               _init
                       _setCursorPos
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          4     4      0     444
                                              6 COMMON     4     4      0
                             _strlen
                          _writechar
 ---------------------------------------------------------------------------------
 (2) _writechar                                            1     1      0     220
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     3      3     101
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _setCursorPos                                         6     2      4     574
                                              6 COMMON     6     2      4
                           _writecmd
 ---------------------------------------------------------------------------------
 (2) _writecmd                                             1     1      0     220
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     198
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _setCursorPos
     _writecmd
       _delay
   _writeString
     _strlen
     _writechar
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      2B       5       53.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      39      12        0.0%
ABS                  0      0      39       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Nov 01 16:33:35 2019

                      pc 0002                       l73 06FC                       l82 0714  
                     l67 06BF                       l76 06E7                       l94 079A  
                     l79 0706                       l88 0730                       _TX 0047  
                     _TZ 0048                       _wd 003E                       fsr 0004  
                    l112 07E0                      l108 07DA                      l800 06BB  
                    l802 06BC                      l796 06B6                      l798 06BA  
                    _RA0 0028                      _RA2 002A                      _RB0 0030  
                    _RA3 002B                      _RA4 002C                      _RA5 002D  
                    u300 07B1                      u301 07B0                      u310 07C1  
                    u311 07C0                      u240 0714                      u320 07D1  
                    u241 0713                      u321 07D0                      u250 072C  
                    u251 072B                      u245 0710                      u280 079A  
                    u281 0799                      u290 07A1                      u291 07A0  
                    u285 0796                      _THV 0049                      _TLV 004A  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     l1100 07AA                     l1110 07D1  
                   l1102 07B1                     l1104 07BA                     l1112 07DA  
                   l1050 06D4                     l1106 07C1                     l1052 06D8  
                   l1108 07CA                     l1060 06E9                     l1046 06FD  
                   l1054 06DA                     l1070 0716                     l1062 06ED  
                   l1048 0700                     l1056 06DB                     l1072 0719  
                   l1064 06EF                     l1058 06E4                     l1074 071F  
                   l1066 06F0                     l1090 0773                     l1322 074F  
                   l1076 072C                     l1068 06F9                     l1092 0780  
                   l1324 0754                     l1094 0786                     l1326 0758  
                   l1096 079B                     l1088 0770                     l1328 0765  
                   l1098 07A1                     STR_1 0011                     _pt10 0044  
                   _main 074F                     _init 06B6                     _tens 0046  
                   btemp 007E                     start 0000           writeString@str 0079  
                  ?_main 0070                    ?_init 0070            __CFG_WDTE$OFF 0000  
                  _PORTA 0005                    _PORTD 0008                    _TRISA 0085  
                  _TRISD 0088              _writeString 076F            __CFG_PWRTE$ON 0000  
                  _t70us 0032                    _t63us 002E                    _pt100 0043  
                  _delay 06FD                    _tUKus 002A                    _table 0020  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07E1             __end_of_main 076F  
           __end_of_init 06C0                   ??_main 007C                   ??_init 0070  
                 ?_delay 0070                   _ADCON1 009F                   _TRISB0 0430  
                 _t430us 0036                   _t503us 003A                   _pt1000 0042  
                 delay@i 0073                   delay@t 0070                   _strlen 0715  
       __end_of_writecmd 06E8  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 0731            __end_of_delay 0715                  ??_delay 0072  
             __pbssBANK0 003E            ?_setCursorPos 0076         setCursorPos@addr 007A  
             __pmaintext 074F                  ?_strlen 0070             ?_writeString 0070  
             __stringtab 0003           ??_setCursorPos 007A       __size_of_writechar 0015  
             _intEntries 0045                  _pt10000 0041                  __ptext1 076F  
                __ptext2 06E8                  __ptext3 0715                  __ptext4 079B  
                __ptext5 06D3                  __ptext6 06FD                  __ptext7 06B6  
              ?_writecmd 0070          __size_of_strlen 001C                  main@str 007D  
   end_of_initialization 07FC                  strlen@a 0073               ??_writecmd 0075  
      __end_of_writechar 06FD             writeString@i 0077     __end_of_setCursorPos 07E1  
         __end_of_strlen 0731      start_initialization 07E1     __size_of_writeString 002C  
             init_fetch0 06C0              __pdataBANK0 0020               read_byte@j 0040  
               ??_strlen 0073                ___latbits 0002        setCursorPos@lineN 0076  
        setCursorPos@ln1 000F          setCursorPos@ln2 000D          setCursorPos@ln3 000B  
        setCursorPos@ln4 0009          setCursorPos@pos 0078                __pstrings 0003  
      __size_of_writecmd 0015           __size_of_delay 0018    __size_of_setCursorPos 0046  
            __stringbase 0008                _writechar 06E8  __end_ofsetCursorPos@ln1 0011  
__end_ofsetCursorPos@ln2 000F  __end_ofsetCursorPos@ln3 000D  __end_ofsetCursorPos@ln4 000B  
           _setCursorPos 079B       __end_of__stringtab 0009               ?_writechar 0070  
          __size_of_main 0020            __size_of_init 000A               writechar@x 0075  
               _writecmd 06D3            ??_writeString 0076                 init_ram0 06C4  
              strlen@len 0074                stringcode 0003                writecmd@x 0075  
               stringdir 0003                 stringtab 0003              ??_writechar 0075  
    __end_of_writeString 079B  
