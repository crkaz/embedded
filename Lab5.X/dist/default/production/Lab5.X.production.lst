

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Oct 25 15:49:59 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	strings
   175  0003                     __pstrings:	
   176  0003                     stringtab:	
   177  0003                     __stringtab:	
   178  0003                     stringcode:	
   179                           ;	String table - string pointers are 1 byte each
   180                           
   181  0003                     stringdir:	
   182  0003  3000               	movlw	high stringdir
   183  0004  008A               	movwf	10
   184  0005  0804               	movf	4,w
   185  0006  0A84               	incf	4,f
   186  0007  0782               	addwf	2,f
   187  0008                     __stringbase:	
   188  0008  3400               	retlw	0
   189  0009                     __end_of__stringtab:	
   190  0009                     setCursorPos@ln2:	
   191  0009  34C0               	retlw	192
   192  000A  3400               	retlw	0
   193  000B                     __end_ofsetCursorPos@ln2:	
   194  000B                     setCursorPos@ln1:	
   195  000B  3480               	retlw	128
   196  000C  3400               	retlw	0
   197  000D                     __end_ofsetCursorPos@ln1:	
   198  0008                     _PORTD	set	8
   199  002B                     _RA3	set	43
   200  002A                     _RA2	set	42
   201  0029                     _RA1	set	41
   202  0088                     _TRISD	set	136
   203  0085                     _TRISA	set	133
   204  009F                     _ADCON1	set	159
   205  000D                     STR_1:	
   206  000D  3457               	retlw	87	;'W'
   207  000E  346F               	retlw	111	;'o'
   208  000F  3472               	retlw	114	;'r'
   209  0010  346C               	retlw	108	;'l'
   210  0011  3464               	retlw	100	;'d'
   211  0012  3400               	retlw	0
   212  0013                     STR_2:	
   213  0013  3448               	retlw	72	;'H'
   214  0014  3465               	retlw	101	;'e'
   215  0015  346C               	retlw	108	;'l'
   216  0016  346C               	retlw	108	;'l'
   217  0017  346F               	retlw	111	;'o'
   218  0018  3400               	retlw	0
   219                           
   220                           ; #config settings
   221  0000                     
   222                           	psect	cinit
   223  07FC                     start_initialization:	
   224  07FC                     __initialization:	
   225  07FC                     end_of_initialization:	
   226                           ;End of C runtime variable initialization code
   227                           
   228  07FC                     __end_of__initialization:	
   229  07FC  0183               	clrf	3
   230  07FD  120A  118A  2FBB   	ljmp	_main	;jump to C main() function
   231                           
   232                           	psect	cstackCOMMON
   233  0070                     __pcstackCOMMON:	
   234  0070                     ?_writecmd:	
   235  0070                     ?_delay:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_init:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ??_init:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_lcd_init:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_writechar:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_writeString:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_strlen:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     delay@t:	
   260                           ; 2 bytes @ 0x0
   261                           
   262                           
   263                           ; 2 bytes @ 0x0
   264  0070                     	ds	2
   265  0072                     ??_delay:	
   266                           
   267                           ; 1 bytes @ 0x2
   268  0072                     	ds	1
   269  0073                     ??_strlen:	
   270  0073                     strlen@a:	
   271                           ; 1 bytes @ 0x3
   272                           
   273  0073                     delay@i:	
   274                           ; 1 bytes @ 0x3
   275                           
   276                           
   277                           ; 2 bytes @ 0x3
   278  0073                     	ds	1
   279  0074                     strlen@len:	
   280                           
   281                           ; 2 bytes @ 0x4
   282  0074                     	ds	1
   283  0075                     ??_writecmd:	
   284  0075                     ??_writechar:	
   285                           ; 1 bytes @ 0x5
   286                           
   287  0075                     writechar@x:	
   288                           ; 1 bytes @ 0x5
   289                           
   290  0075                     writecmd@x:	
   291                           ; 1 bytes @ 0x5
   292                           
   293                           
   294                           ; 1 bytes @ 0x5
   295  0075                     	ds	1
   296  0076                     ??_lcd_init:	
   297  0076                     ??_writeString:	
   298                           ; 1 bytes @ 0x6
   299                           
   300  0076                     ?_setCursorPos:	
   301                           ; 1 bytes @ 0x6
   302                           
   303  0076                     setCursorPos@lineN:	
   304                           ; 1 bytes @ 0x6
   305                           
   306                           
   307                           ; 2 bytes @ 0x6
   308  0076                     	ds	1
   309  0077                     writeString@i:	
   310                           
   311                           ; 2 bytes @ 0x7
   312  0077                     	ds	1
   313  0078                     setCursorPos@pos:	
   314                           
   315                           ; 2 bytes @ 0x8
   316  0078                     	ds	1
   317  0079                     writeString@str:	
   318                           
   319                           ; 1 bytes @ 0x9
   320  0079                     	ds	1
   321  007A                     ??_setCursorPos:	
   322  007A                     setCursorPos@addr:	
   323                           ; 1 bytes @ 0xA
   324                           
   325                           
   326                           ; 2 bytes @ 0xA
   327  007A                     	ds	2
   328  007C                     ??_main:	
   329                           
   330                           ; 1 bytes @ 0xC
   331  007C                     	ds	1
   332                           
   333                           	psect	cstackBANK0
   334  0020                     __pcstackBANK0:	
   335  0020                     main@str:	
   336                           
   337                           ; 1 bytes @ 0x0
   338  0020                     	ds	1
   339  0021                     main@str2:	
   340                           
   341                           ; 1 bytes @ 0x1
   342  0021                     	ds	1
   343                           
   344                           	psect	maintext
   345  07BB                     __pmaintext:	
   346 ;;
   347 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   348 ;;
   349 ;; *************** function _main *****************
   350 ;; Defined at:
   351 ;;		line 94 in file "lab5.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  str2            1    1[BANK0 ] PTR unsigned char 
   356 ;;		 -> STR_2(6), 
   357 ;;  str             1    0[BANK0 ] PTR unsigned char 
   358 ;;		 -> STR_1(6), 
   359 ;; Return value:  Size  Location     Type
   360 ;;                  1    wreg      void 
   361 ;; Registers used:
   362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   363 ;; Tracked objects:
   364 ;;		On entry : B00/0
   365 ;;		On exit  : 0/0
   366 ;;		Unchanged: 0/0
   367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   368 ;;      Params:         0       0       0       0       0
   369 ;;      Locals:         0       2       0       0       0
   370 ;;      Temps:          1       0       0       0       0
   371 ;;      Totals:         1       2       0       0       0
   372 ;;Total ram usage:        3 bytes
   373 ;; Hardware stack levels required when called:    3
   374 ;; This function calls:
   375 ;;		_init
   376 ;;		_lcd_init
   377 ;;		_setCursorPos
   378 ;;		_writeString
   379 ;; This function is called by:
   380 ;;		Startup code after reset
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384                           
   385                           ;psect for function _main
   386  07BB                     _main:	
   387  07BB                     l63:	
   388                           ;incstack = 0
   389                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   390                           ;lab5.c: 95:         setCursorPos(1, 1);
   391                           
   392                           
   393                           ;lab5.c: 96:         writeString(str2);
   394  07BB  120A  118A  2702  120A  118A  	fcall	_init
   395                           
   396                           ;lab5.c: 97: 
   397  07C0  120A  118A  2709  120A  118A  	fcall	_lcd_init
   398                           
   399                           ;lab5.c: 99: }
   400  07C5  3005               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   401  07C6  00FC               	movwf	??_main
   402  07C7  087C               	movf	??_main,w
   403  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   404  07C9  1303               	bcf	3,6	;RP1=0, select bank0
   405  07CA  00A0               	movwf	main@str
   406  07CB  3002               	movlw	2
   407  07CC  00F6               	movwf	setCursorPos@lineN
   408  07CD  3000               	movlw	0
   409  07CE  00F7               	movwf	setCursorPos@lineN+1
   410  07CF  3003               	movlw	3
   411  07D0  00F8               	movwf	setCursorPos@pos
   412  07D1  3000               	movlw	0
   413  07D2  00F9               	movwf	setCursorPos@pos+1
   414  07D3  120A  118A  276F  120A  118A  	fcall	_setCursorPos
   415  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   416  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   417  07DA  0820               	movf	main@str,w
   418  07DB  120A  118A  2792  120A  118A  	fcall	_writeString
   419  07E0  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   420  07E1  00FC               	movwf	??_main
   421  07E2  087C               	movf	??_main,w
   422  07E3  1283               	bcf	3,5	;RP0=0, select bank0
   423  07E4  1303               	bcf	3,6	;RP1=0, select bank0
   424  07E5  00A1               	movwf	main@str2
   425  07E6  3001               	movlw	1
   426  07E7  00F6               	movwf	setCursorPos@lineN
   427  07E8  3000               	movlw	0
   428  07E9  00F7               	movwf	setCursorPos@lineN+1
   429  07EA  3001               	movlw	1
   430  07EB  00F8               	movwf	setCursorPos@pos
   431  07EC  3000               	movlw	0
   432  07ED  00F9               	movwf	setCursorPos@pos+1
   433  07EE  120A  118A  276F  120A  118A  	fcall	_setCursorPos
   434  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   435  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   436  07F5  0821               	movf	main@str2,w
   437  07F6  120A  118A  2792  120A  118A  	fcall	_writeString
   438  07FB  2FBB               	goto	l63
   439  07FC                     __end_of_main:	
   440                           
   441                           	psect	text1
   442  0792                     __ptext1:	
   443 ;; *************** function _writeString *****************
   444 ;; Defined at:
   445 ;;		line 71 in file "lab5.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;  str             1    wreg     PTR unsigned char 
   448 ;;		 -> STR_2(6), STR_1(6), 
   449 ;; Auto vars:     Size  Location     Type
   450 ;;  str             1    9[COMMON] PTR unsigned char 
   451 ;;		 -> STR_2(6), STR_1(6), 
   452 ;;  i               2    7[COMMON] int 
   453 ;; Return value:  Size  Location     Type
   454 ;;                  1    wreg      void 
   455 ;; Registers used:
   456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   462 ;;      Params:         0       0       0       0       0
   463 ;;      Locals:         3       0       0       0       0
   464 ;;      Temps:          1       0       0       0       0
   465 ;;      Totals:         4       0       0       0       0
   466 ;;Total ram usage:        4 bytes
   467 ;; Hardware stack levels used:    1
   468 ;; Hardware stack levels required when called:    2
   469 ;; This function calls:
   470 ;;		_strlen
   471 ;;		_writechar
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           
   478                           ;psect for function _writeString
   479  0792                     _writeString:	
   480                           
   481                           ;incstack = 0
   482                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   483                           ;writeString@str stored from wreg
   484  0792  00F9               	movwf	writeString@str
   485                           
   486                           ;lab5.c: 72: 
   487  0793  01F7               	clrf	writeString@i
   488  0794  01F8               	clrf	writeString@i+1
   489  0795                     l782:	
   490  0795  0879               	movf	writeString@str,w
   491  0796  120A  118A  2755  120A  118A  	fcall	_strlen
   492  079B  0878               	movf	writeString@i+1,w
   493  079C  3A80               	xorlw	128
   494  079D  00F6               	movwf	??_writeString
   495  079E  0871               	movf	?_strlen+1,w
   496  079F  3A80               	xorlw	128
   497  07A0  0276               	subwf	??_writeString,w
   498  07A1  1D03               	skipz
   499  07A2  2FA5               	goto	u85
   500  07A3  0870               	movf	?_strlen,w
   501  07A4  0277               	subwf	writeString@i,w
   502  07A5                     u85:	
   503  07A5  1803               	btfsc	3,0
   504  07A6  0008               	return
   505                           
   506                           ;lab5.c: 73:     if (lineN == 1) {
   507  07A7  0877               	movf	writeString@i,w
   508  07A8  0779               	addwf	writeString@str,w
   509  07A9  0084               	movwf	4
   510  07AA  120A  118A  2003  120A  118A  	fcall	stringdir
   511  07AF  120A  118A  272D  120A  118A  	fcall	_writechar
   512                           
   513                           ;lab5.c: 74: 
   514  07B4  3001               	movlw	1
   515  07B5  07F7               	addwf	writeString@i,f
   516  07B6  1803               	skipnc
   517  07B7  0AF8               	incf	writeString@i+1,f
   518  07B8  3000               	movlw	0
   519  07B9  07F8               	addwf	writeString@i+1,f
   520  07BA  2F95               	goto	l782
   521  07BB                     __end_of_writeString:	
   522                           
   523                           	psect	text2
   524  072D                     __ptext2:	
   525 ;; *************** function _writechar *****************
   526 ;; Defined at:
   527 ;;		line 35 in file "lab5.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;  x               1    wreg     unsigned char 
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  x               1    5[COMMON] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0, pclath, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   541 ;;      Params:         0       0       0       0       0
   542 ;;      Locals:         1       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0
   544 ;;      Totals:         1       0       0       0       0
   545 ;;Total ram usage:        1 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    1
   548 ;; This function calls:
   549 ;;		_delay
   550 ;; This function is called by:
   551 ;;		_writeString
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           
   556                           ;psect for function _writechar
   557  072D                     _writechar:	
   558                           
   559                           ;incstack = 0
   560                           ; Regs used in _writechar: [wreg+status,2+status,0+pclath+cstack]
   561                           ;writechar@x stored from wreg
   562  072D  00F5               	movwf	writechar@x
   563                           
   564                           ;lab5.c: 37: 
   565  072E  1283               	bcf	3,5	;RP0=0, select bank0
   566  072F  1303               	bcf	3,6	;RP1=0, select bank0
   567  0730  1485               	bsf	5,1	;volatile
   568                           
   569                           ;lab5.c: 38: void writecmd(char x) {
   570  0731  1105               	bcf	5,2	;volatile
   571                           
   572                           ;lab5.c: 39:     RA1 = 0;
   573  0732  0875               	movf	writechar@x,w
   574  0733  0088               	movwf	8	;volatile
   575                           
   576                           ;lab5.c: 40:     RA2 = 0;
   577  0734  1185               	bcf	5,3	;volatile
   578                           
   579                           ;lab5.c: 41:     PORTD = x;
   580  0735  3070               	movlw	112
   581  0736  00F0               	movwf	delay@t
   582  0737  3017               	movlw	23
   583  0738  00F1               	movwf	delay@t+1
   584  0739  120A  118A  2740   	fcall	_delay
   585                           
   586                           ;lab5.c: 42:     RA3 = 0;
   587  073C  1283               	bcf	3,5	;RP0=0, select bank0
   588  073D  1303               	bcf	3,6	;RP1=0, select bank0
   589  073E  1585               	bsf	5,3	;volatile
   590  073F  0008               	return
   591  0740                     __end_of_writechar:	
   592                           
   593                           	psect	text3
   594  0755                     __ptext3:	
   595 ;; *************** function _strlen *****************
   596 ;; Defined at:
   597 ;;		line 64 in file "lab5.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  a               1    wreg     PTR unsigned char 
   600 ;;		 -> STR_2(6), STR_1(6), 
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  a               1    3[COMMON] PTR unsigned char 
   603 ;;		 -> STR_2(6), STR_1(6), 
   604 ;;  len             2    4[COMMON] int 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  2    0[COMMON] int 
   607 ;; Registers used:
   608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         3       0       0       0       0
   615 ;;      Locals:         3       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0
   617 ;;      Totals:         6       0       0       0       0
   618 ;;Total ram usage:        6 bytes
   619 ;; Hardware stack levels used:    2
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_writeString
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           
   628                           ;psect for function _strlen
   629  0755                     _strlen:	
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   633                           ;strlen@a stored from wreg
   634  0755  00F3               	movwf	strlen@a
   635                           
   636                           ;lab5.c: 65:     }
   637  0756  01F4               	clrf	strlen@len
   638  0757  01F5               	clrf	strlen@len+1
   639  0758                     l762:	
   640                           ;lab5.c: 66: }
   641                           
   642                           
   643                           ;lab5.c: 66: }
   644  0758  0874               	movf	strlen@len,w
   645  0759  0773               	addwf	strlen@a,w
   646  075A  0084               	movwf	4
   647  075B  120A  118A  2003  120A  118A  	fcall	stringdir
   648  0760  3A00               	xorlw	0
   649  0761  1903               	btfsc	3,2
   650  0762  2F6A               	goto	l764
   651                           
   652                           ;lab5.c: 67: 
   653  0763  3001               	movlw	1
   654  0764  07F4               	addwf	strlen@len,f
   655  0765  1803               	skipnc
   656  0766  0AF5               	incf	strlen@len+1,f
   657  0767  3000               	movlw	0
   658  0768  07F5               	addwf	strlen@len+1,f
   659  0769  2F58               	goto	l762
   660  076A                     l764:	
   661                           
   662                           ;lab5.c: 68: void setCursorPos(int lineN, int pos) {
   663  076A  0875               	movf	strlen@len+1,w
   664  076B  00F1               	movwf	?_strlen+1
   665  076C  0874               	movf	strlen@len,w
   666  076D  00F0               	movwf	?_strlen
   667  076E  0008               	return
   668  076F                     __end_of_strlen:	
   669                           
   670                           	psect	text4
   671  076F                     __ptext4:	
   672 ;; *************** function _setCursorPos *****************
   673 ;; Defined at:
   674 ;;		line 77 in file "lab5.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  lineN           2    6[COMMON] int 
   677 ;;  pos             2    8[COMMON] int 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  addr            2   10[COMMON] int 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         4       0       0       0       0
   690 ;;      Locals:         2       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0
   692 ;;      Totals:         6       0       0       0       0
   693 ;;Total ram usage:        6 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    2
   696 ;; This function calls:
   697 ;;		_writecmd
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           
   704                           ;psect for function _setCursorPos
   705  076F                     _setCursorPos:	
   706                           
   707                           ;lab5.c: 78: ;lab5.c: 79:         addr = ln2 + pos;;lab5.c: 80:         writecmd(addr);;
      +                          lab5.c: 82: }
   708                           
   709                           ;incstack = 0
   710                           ; Regs used in _setCursorPos: [wreg+status,2+status,0+pclath+cstack]
   711  076F  0376               	decf	setCursorPos@lineN,w
   712  0770  0477               	iorwf	setCursorPos@lineN+1,w
   713  0771  1D03               	btfss	3,2
   714  0772  2F80               	goto	l790
   715                           
   716                           ;lab5.c: 84: 
   717  0773  0878               	movf	setCursorPos@pos,w
   718  0774  3E80               	addlw	128
   719  0775  00FA               	movwf	setCursorPos@addr
   720  0776  0879               	movf	setCursorPos@pos+1,w
   721  0777  1803               	skipnc
   722  0778  3E01               	addlw	1
   723  0779  3E00               	addlw	0
   724  077A  00FB               	movwf	setCursorPos@addr+1
   725                           
   726                           ;lab5.c: 85: void main() {
   727  077B  087A               	movf	setCursorPos@addr,w
   728  077C  120A  118A  271A   	fcall	_writecmd
   729                           
   730                           ;lab5.c: 86:     while (1) {
   731  077F  0008               	return
   732  0780                     l790:	
   733  0780  3002               	movlw	2
   734  0781  0676               	xorwf	setCursorPos@lineN,w
   735  0782  0477               	iorwf	setCursorPos@lineN+1,w
   736  0783  1D03               	btfss	3,2
   737  0784  0008               	return
   738                           
   739                           ;lab5.c: 88:         lcd_init();
   740  0785  0878               	movf	setCursorPos@pos,w
   741  0786  3EC0               	addlw	192
   742  0787  00FA               	movwf	setCursorPos@addr
   743  0788  0879               	movf	setCursorPos@pos+1,w
   744  0789  1803               	skipnc
   745  078A  3E01               	addlw	1
   746  078B  3E00               	addlw	0
   747  078C  00FB               	movwf	setCursorPos@addr+1
   748                           
   749                           ;lab5.c: 89: 
   750  078D  087A               	movf	setCursorPos@addr,w
   751  078E  120A  118A  271A   	fcall	_writecmd
   752  0791  0008               	return
   753  0792                     __end_of_setCursorPos:	
   754                           
   755                           	psect	text5
   756  0709                     __ptext5:	
   757 ;; *************** function _lcd_init *****************
   758 ;; Defined at:
   759 ;;		line 27 in file "lab5.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2, status,0, pclath, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   773 ;;      Params:         0       0       0       0       0
   774 ;;      Locals:         0       0       0       0       0
   775 ;;      Temps:          0       0       0       0       0
   776 ;;      Totals:         0       0       0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    2
   780 ;; This function calls:
   781 ;;		_writecmd
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _lcd_init
   789  0709                     _lcd_init:	
   790                           
   791                           ;lab5.c: 28:     RA1 = 1;
   792                           
   793                           ;incstack = 0
   794                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   795  0709  300E               	movlw	14
   796  070A  120A  118A  271A  120A  118A  	fcall	_writecmd
   797                           
   798                           ;lab5.c: 29:     RA2 = 0;
   799  070F  3001               	movlw	1
   800  0710  120A  118A  271A  120A  118A  	fcall	_writecmd
   801                           
   802                           ;lab5.c: 30:     PORTD = x;
   803  0715  3038               	movlw	56
   804  0716  120A  118A  271A   	fcall	_writecmd
   805  0719  0008               	return
   806  071A                     __end_of_lcd_init:	
   807                           
   808                           	psect	text6
   809  071A                     __ptext6:	
   810 ;; *************** function _writecmd *****************
   811 ;; Defined at:
   812 ;;		line 47 in file "lab5.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  x               1    wreg     unsigned char 
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  x               1    5[COMMON] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0, pclath, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         1       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0
   829 ;;      Totals:         1       0       0       0       0
   830 ;;Total ram usage:        1 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    1
   833 ;; This function calls:
   834 ;;		_delay
   835 ;; This function is called by:
   836 ;;		_lcd_init
   837 ;;		_setCursorPos
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           
   842                           ;psect for function _writecmd
   843  071A                     _writecmd:	
   844                           
   845                           ;incstack = 0
   846                           ; Regs used in _writecmd: [wreg+status,2+status,0+pclath+cstack]
   847                           ;writecmd@x stored from wreg
   848  071A  00F5               	movwf	writecmd@x
   849                           
   850                           ;lab5.c: 48: 
   851  071B  1283               	bcf	3,5	;RP0=0, select bank0
   852  071C  1303               	bcf	3,6	;RP1=0, select bank0
   853  071D  1085               	bcf	5,1	;volatile
   854                           
   855                           ;lab5.c: 49: void delay(int t) {
   856  071E  1105               	bcf	5,2	;volatile
   857                           
   858                           ;lab5.c: 50:     int i;
   859  071F  0875               	movf	writecmd@x,w
   860  0720  0088               	movwf	8	;volatile
   861                           
   862                           ;lab5.c: 51:     for (i = 0; i < t; i++);
   863  0721  1185               	bcf	5,3	;volatile
   864                           
   865                           ;lab5.c: 52: }
   866  0722  3070               	movlw	112
   867  0723  00F0               	movwf	delay@t
   868  0724  3017               	movlw	23
   869  0725  00F1               	movwf	delay@t+1
   870  0726  120A  118A  2740   	fcall	_delay
   871                           
   872                           ;lab5.c: 53: 
   873  0729  1283               	bcf	3,5	;RP0=0, select bank0
   874  072A  1303               	bcf	3,6	;RP1=0, select bank0
   875  072B  1585               	bsf	5,3	;volatile
   876  072C  0008               	return
   877  072D                     __end_of_writecmd:	
   878                           
   879                           	psect	text7
   880  0740                     __ptext7:	
   881 ;; *************** function _delay *****************
   882 ;; Defined at:
   883 ;;		line 58 in file "lab5.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;  t               2    0[COMMON] int 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  i               2    3[COMMON] int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, status,2
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         2       0       0       0       0
   898 ;;      Locals:         2       0       0       0       0
   899 ;;      Temps:          1       0       0       0       0
   900 ;;      Totals:         5       0       0       0       0
   901 ;;Total ram usage:        5 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; This function calls:
   904 ;;		Nothing
   905 ;; This function is called by:
   906 ;;		_writechar
   907 ;;		_writecmd
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           
   912                           ;psect for function _delay
   913  0740                     _delay:	
   914                           
   915                           ;lab5.c: 59:     return len;;lab5.c: 60: }
   916                           
   917                           ;incstack = 0
   918                           ; Regs used in _delay: [wreg+status,2]
   919  0740  01F3               	clrf	delay@i
   920  0741  01F4               	clrf	delay@i+1
   921  0742                     l33:	
   922  0742  0874               	movf	delay@i+1,w
   923  0743  3A80               	xorlw	128
   924  0744  00F2               	movwf	??_delay
   925  0745  0871               	movf	delay@t+1,w
   926  0746  3A80               	xorlw	128
   927  0747  0272               	subwf	??_delay,w
   928  0748  1D03               	skipz
   929  0749  2F4C               	goto	u65
   930  074A  0870               	movf	delay@t,w
   931  074B  0273               	subwf	delay@i,w
   932  074C                     u65:	
   933  074C  1803               	btfsc	3,0
   934  074D  0008               	return
   935  074E  3001               	movlw	1
   936  074F  07F3               	addwf	delay@i,f
   937  0750  1803               	skipnc
   938  0751  0AF4               	incf	delay@i+1,f
   939  0752  3000               	movlw	0
   940  0753  07F4               	addwf	delay@i+1,f
   941  0754  2F42               	goto	l33
   942  0755                     __end_of_delay:	
   943                           
   944                           	psect	text8
   945  0702                     __ptext8:	
   946 ;; *************** function _init *****************
   947 ;; Defined at:
   948 ;;		line 19 in file "lab5.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;		None
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, status,2
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   962 ;;      Params:         0       0       0       0       0
   963 ;;      Locals:         0       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0
   965 ;;      Totals:         0       0       0       0       0
   966 ;;Total ram usage:        0 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _init
   977  0702                     _init:	
   978                           
   979                           ;lab5.c: 20:     writecmd(0x1);
   980                           
   981                           ;incstack = 0
   982                           ; Regs used in _init: [wreg+status,2]
   983  0702  3007               	movlw	7
   984  0703  1683               	bsf	3,5	;RP0=1, select bank1
   985  0704  1303               	bcf	3,6	;RP1=0, select bank1
   986  0705  009F               	movwf	31	;volatile
   987                           
   988                           ;lab5.c: 21:     writecmd(0x38);
   989  0706  0185               	clrf	5	;volatile
   990                           
   991                           ;lab5.c: 22: }
   992  0707  0188               	clrf	8	;volatile
   993  0708  0008               	return
   994  0709                     __end_of_init:	
   995  007E                     btemp	set	126	;btemp
   996  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    4
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    main@str2	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), 

    main@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_1(CODE[6]), 

    writeString@str	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 

    strlen@a	PTR unsigned char  size(1) Largest target is 6
		 -> STR_2(CODE[6]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_setCursorPos
    _writeString->_strlen
    _writeString->_writechar
    _writechar->_delay
    _setCursorPos->_writecmd
    _lcd_init->_writecmd
    _writecmd->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1401
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                               _init
                           _lcd_init
                       _setCursorPos
                        _writeString
 ---------------------------------------------------------------------------------
 (1) _writeString                                          4     4      0     477
                                              6 COMMON     4     4      0
                             _strlen
                          _writechar
 ---------------------------------------------------------------------------------
 (2) _writechar                                            1     1      0     220
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     3      3     101
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _setCursorPos                                         6     2      4     658
                                              6 COMMON     6     2      4
                           _writecmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     220
                           _writecmd
 ---------------------------------------------------------------------------------
 (2) _writecmd                                             1     1      0     220
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     198
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _lcd_init
     _writecmd
       _delay
   _setCursorPos
     _writecmd
       _delay
   _writeString
     _strlen
     _writechar
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Oct 25 15:49:59 2019

                      pc 0002                       l33 0742                       l63 07BB  
                     u65 074C                       u85 07A5                       fsr 0004  
                    l762 0758                      l764 076A                      l790 0780  
                    l782 0795                      _RA1 0029                      _RA2 002A  
                    _RA3 002B                      fsr0 0004             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     STR_1 000D                     STR_2 0013  
                   _main 07BB                     _init 0702                     btemp 007E  
                   start 0000           writeString@str 0079                    ?_main 0070  
                  ?_init 0070            __CFG_WDTE$OFF 0000                    _PORTD 0008  
                  _TRISA 0085                    _TRISD 0088              _writeString 0792  
          __CFG_PWRTE$ON 0000                    _delay 0740           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07FC             __end_of_init 0709  
                 ??_main 007C                   ??_init 0070                   ?_delay 0070  
                 _ADCON1 009F         __end_of_lcd_init 071A                   delay@i 0073  
                 delay@t 0070                   _strlen 0755         __end_of_writecmd 072D  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 0755  
                ??_delay 0072            ?_setCursorPos 0076         setCursorPos@addr 007A  
             __pmaintext 07BB                  ?_strlen 0070             ?_writeString 0070  
              ?_lcd_init 0070               __stringtab 0003           ??_setCursorPos 007A  
     __size_of_writechar 0013                  __ptext1 0792                  __ptext2 072D  
                __ptext3 0755                  __ptext4 076F                  __ptext5 0709  
                __ptext6 071A                  __ptext7 0740                  __ptext8 0702  
              ?_writecmd 0070          __size_of_strlen 001A               ??_lcd_init 0076  
                main@str 0020     end_of_initialization 07FC                  strlen@a 0073  
             ??_writecmd 0075        __end_of_writechar 0740             writeString@i 0077  
   __end_of_setCursorPos 0792           __end_of_strlen 076F      start_initialization 07FC  
   __size_of_writeString 0029                 ??_strlen 0073                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_lcd_init 0011        setCursorPos@lineN 0076  
        setCursorPos@ln1 000B          setCursorPos@ln2 0009          setCursorPos@pos 0078  
              __pstrings 0003        __size_of_writecmd 0013           __size_of_delay 0015  
  __size_of_setCursorPos 0023              __stringbase 0008                _writechar 072D  
__end_ofsetCursorPos@ln1 000D  __end_ofsetCursorPos@ln2 000B             _setCursorPos 076F  
     __end_of__stringtab 0009               ?_writechar 0070                 _lcd_init 0709  
          __size_of_main 0041            __size_of_init 0007                 main@str2 0021  
             writechar@x 0075                 _writecmd 071A            ??_writeString 0076  
              strlen@len 0074                stringcode 0003                writecmd@x 0075  
               stringdir 0003                 stringtab 0003              ??_writechar 0075  
    __end_of_writeString 07BB  
